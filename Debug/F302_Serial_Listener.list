
F302_Serial_Listener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08003fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003fb0  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f7  00000000  00000000  0002ffab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000329a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00033548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cedf  00000000  00000000  00033fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eea6  00000000  00000000  00050e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d15  00000000  00000000  0005fd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  00100ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f4c 	.word	0x08003f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f4c 	.word	0x08003f4c

080001c8 <Buzzer_On>:
#include "Buzzer_Task.h"


// Buzzer turn on.
void Buzzer_On( void )
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	// PC2 as alternate function mode, bit # 5~ #4, 0x2 .
	GPIOC->MODER &= 0xffffffcf;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <Buzzer_On+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <Buzzer_On+0x28>)
 80001d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00000020;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <Buzzer_On+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <Buzzer_On+0x28>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	48000800 	.word	0x48000800

080001f4 <Buzzer_Off>:

// Buzzer turn off.
void Buzzer_Off( void )
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	// PC2 ( bit #5 ~ #4 ) as input port mode.
	GPIOC->MODER &= 0xffffffcf;
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <Buzzer_Off+0x1c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <Buzzer_Off+0x1c>)
 80001fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	48000800 	.word	0x48000800

08000214 <Buzzer_Init>:

// Initialize.
void Buzzer_Init( void )
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	// APB2 ( 64MHz ).
	// Timer #1 peripheral clock enable ( bit #11 ).
	RCC->APB2ENR |= 0x00000800;
 8000218:	4b1c      	ldr	r3, [pc, #112]	; (800028c <Buzzer_Init+0x78>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a1b      	ldr	r2, [pc, #108]	; (800028c <Buzzer_Init+0x78>)
 800021e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000222:	6193      	str	r3, [r2, #24]

	TIM1->CR1 = 0x0000;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <Buzzer_Init+0x7c>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
	// 64MHz = 0.015625us, 15.625ns for DTI .
	// Prescaler value 1.
	TIM1->PSC = 0;
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <Buzzer_Init+0x7c>)
 800022c:	2200      	movs	r2, #0
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
	// Period.
	// 100KHz = 10us.
	// 250us / 0.015625us = 16000.
	TIM1->ARR = 16000;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <Buzzer_Init+0x7c>)
 8000232:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000236:	62da      	str	r2, [r3, #44]	; 0x2c

	// CH #3, PWM duty 50% ( Test ).
	TIM1->CCR3 = 8000;
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <Buzzer_Init+0x7c>)
 800023a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800023e:	63da      	str	r2, [r3, #60]	; 0x3c

	// CH #3, configure PWM mode 1.
	TIM1->CCMR2 = 0x00000060;
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <Buzzer_Init+0x7c>)
 8000242:	2260      	movs	r2, #96	; 0x60
 8000244:	61da      	str	r2, [r3, #28]

	// OIS3 = 0, when MOE = 0, ( CH3 and CH3N output state idle ), CH3 output 0,  ( bit #12 ).
	// OIS3N = 1, when MOE = 0, ( CH3 and CH3N output state idle ), CH3N output 1,  ( bit #13 ).
	TIM1->CR2 = 0x00002000;
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <Buzzer_Init+0x7c>)
 8000248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800024c:	605a      	str	r2, [r3, #4]

	// OSSR = 1, When MOE = 0, CH1 / CH1N still output H or L logic, not high Z.  ( it #11 ).
	// AOE = 0, MOE could set/clear by software ( bit #14 ).
	// MOE = 1, Main output ( CH1 and CH1N ) enable, not idle, ( bit #15 ).
	// bit[ 7~0 ] = 8, 8*15.625ns = 125ns dead time.
	TIM1->BDTR = 0x8808;
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <Buzzer_Init+0x7c>)
 8000250:	f648 0208 	movw	r2, #34824	; 0x8808
 8000254:	645a      	str	r2, [r3, #68]	; 0x44
	// OC #3:
	// Negative output ( TIM1_CH3N ) active low ( bit #11, 0 ).
	// Negative output ( TIM1_CH3N ) enable ( bit #10, 1 ).
	// Positive output ( TIM1_CH3 ) active high ( bit #9, 0 ).
	// Positive output ( TIM1_CH3 ) enable ( bit #8, 1 ).
	TIM1->CCER = 0x0500;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <Buzzer_Init+0x7c>)
 8000258:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800025c:	621a      	str	r2, [r3, #32]
	// Enable.
	TIM1->CR1 |= 0x0001;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <Buzzer_Init+0x7c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <Buzzer_Init+0x7c>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]

	// PC2, alternate function 2, bit #11 ~ #8, 0x02.
	GPIOC->AFR[0] &= 0xfffff0ff;
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <Buzzer_Init+0x80>)
 800026c:	6a1b      	ldr	r3, [r3, #32]
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <Buzzer_Init+0x80>)
 8000270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000274:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= 0x00000200;
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <Buzzer_Init+0x80>)
 8000278:	6a1b      	ldr	r3, [r3, #32]
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <Buzzer_Init+0x80>)
 800027c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000280:	6213      	str	r3, [r2, #32]

}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40021000 	.word	0x40021000
 8000290:	40012c00 	.word	0x40012c00
 8000294:	48000800 	.word	0x48000800

08000298 <Char_to_Int>:

#include "Char_Convert.h"

// Character to integer.
uint8_t Char_to_Int( uint8_t char_in )
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_value;

	ret_value = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	73fb      	strb	r3, [r7, #15]

	// '0' ~ '9'.
	if( char_in > 0x2f && char_in < 0x3a )
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b2f      	cmp	r3, #47	; 0x2f
 80002aa:	d908      	bls.n	80002be <Char_to_Int+0x26>
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b39      	cmp	r3, #57	; 0x39
 80002b0:	d805      	bhi.n	80002be <Char_to_Int+0x26>
	{
		ret_value = char_in;
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x30;
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	3b30      	subs	r3, #48	; 0x30
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e01c      	b.n	80002f8 <Char_to_Int+0x60>
	}
	// 'A' ~ 'F'
	else if( char_in > 0x40 && char_in < 0x47 )
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b40      	cmp	r3, #64	; 0x40
 80002c2:	d90b      	bls.n	80002dc <Char_to_Int+0x44>
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b46      	cmp	r3, #70	; 0x46
 80002c8:	d808      	bhi.n	80002dc <Char_to_Int+0x44>
	{
		ret_value = char_in;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x41;
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	3b41      	subs	r3, #65	; 0x41
 80002d2:	73fb      	strb	r3, [r7, #15]
		ret_value += 10;
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	330a      	adds	r3, #10
 80002d8:	73fb      	strb	r3, [r7, #15]
 80002da:	e00d      	b.n	80002f8 <Char_to_Int+0x60>
	}
	// 'a' ~ 'f'
	else if( char_in > 0x60 && char_in < 0x67 )
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b60      	cmp	r3, #96	; 0x60
 80002e0:	d90a      	bls.n	80002f8 <Char_to_Int+0x60>
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b66      	cmp	r3, #102	; 0x66
 80002e6:	d807      	bhi.n	80002f8 <Char_to_Int+0x60>
	{
		ret_value = char_in;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x61;
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	3b61      	subs	r3, #97	; 0x61
 80002f0:	73fb      	strb	r3, [r7, #15]
		ret_value += 10;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	330a      	adds	r3, #10
 80002f6:	73fb      	strb	r3, [r7, #15]
	}

	return ret_value;
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
	...

08000308 <GPIO_UART1_485_DE>:
#include "UART_Task.h"
#include "Buzzer_Task.h"

// UART #1 RS485 flow TX on,
void GPIO_UART1_485_DE( void )
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	// PB1 output high.
	GPIOB->BSRR = 0x00000002;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <GPIO_UART1_485_DE+0x14>)
 800030e:	2202      	movs	r2, #2
 8000310:	619a      	str	r2, [r3, #24]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	48000400 	.word	0x48000400

08000320 <GPIO_UART1_485_RE>:

// UART #1 RS485 flow RX on,
void GPIO_UART1_485_RE( void )
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	// PB1 output low.
	GPIOB->BSRR = 0x00020000;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <GPIO_UART1_485_RE+0x18>)
 8000326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800032a:	619a      	str	r2, [r3, #24]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	48000400 	.word	0x48000400

0800033c <GPIO_UART3_485_DE>:

// UART #3 RS485 flow TX on,
void GPIO_UART3_485_DE( void )
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	// PB2 output high.
	GPIOB->BSRR = 0x00000004;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <GPIO_UART3_485_DE+0x14>)
 8000342:	2204      	movs	r2, #4
 8000344:	619a      	str	r2, [r3, #24]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	48000400 	.word	0x48000400

08000354 <GPIO_UART3_485_RE>:

// UART #3 RS485 flow RX on,
void GPIO_UART3_485_RE( void )
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	// PB2 output low.
	GPIOB->BSRR = 0x00040000;
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <GPIO_UART3_485_RE+0x18>)
 800035a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800035e:	619a      	str	r2, [r3, #24]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	48000400 	.word	0x48000400

08000370 <GPIO_LED1_Off>:
	// PC10 output high.
	GPIOC->BSRR = 0x00000400;
}
// User LED #1 turn off.
void GPIO_LED1_Off( void )
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	// PC10 output low.
	GPIOC->BSRR = 0x04000000;
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <GPIO_LED1_Off+0x18>)
 8000376:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800037a:	619a      	str	r2, [r3, #24]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	48000800 	.word	0x48000800

0800038c <GPIO_LED2_Off>:
	// PC11 output high.
	GPIOC->BSRR = 0x00000800;
}
// User LED #2 turn off.
void GPIO_LED2_Off( void )
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	// PC11 output low.
	GPIOC->BSRR = 0x08000000;
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <GPIO_LED2_Off+0x18>)
 8000392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000396:	619a      	str	r2, [r3, #24]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	48000800 	.word	0x48000800

080003a8 <GPIO_LED3_Off>:
	// PC12 output high.
	GPIOC->BSRR = 0x00001000;
}
// User LED #3 turn off.
void GPIO_LED3_Off( void )
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	// PC12 output low.
	GPIOC->BSRR = 0x10000000;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <GPIO_LED3_Off+0x18>)
 80003ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b2:	619a      	str	r2, [r3, #24]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	48000800 	.word	0x48000800

080003c4 <GPIO_LED4_Off>:
	// PD2 output high.
	GPIOD->BSRR = 0x00000004;
}
// User LED #4 turn off.
void GPIO_LED4_Off( void )
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	// PD2 output low.
	GPIOD->BSRR = 0x00040000;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <GPIO_LED4_Off+0x18>)
 80003ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ce:	619a      	str	r2, [r3, #24]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	48000c00 	.word	0x48000c00

080003e0 <GPIO_LED_CAN_Inactive>:
	// Set delay count ( 20 * 10ms ).
	gpio_led_can_dly = 20;
}
// CAN bus inactive LED off.
void GPIO_LED_CAN_Inactive( void )
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	// PC15 output low.
	GPIOC->BSRR = 0x80000000;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <GPIO_LED_CAN_Inactive+0x18>)
 80003e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80003ea:	619a      	str	r2, [r3, #24]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	48000800 	.word	0x48000800

080003fc <GPIO_LED_UART1_Inactive>:
	gpio_led_uart1_dly = 20;
}

// UART #1 inactive LED off.
void GPIO_LED_UART1_Inactive( void )
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	// PC14 output low.
	GPIOC->BSRR = 0x40000000;
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <GPIO_LED_UART1_Inactive+0x18>)
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	619a      	str	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	48000800 	.word	0x48000800

08000418 <GPIO_LED_UART3_Inactive>:
	// Set delay count ( 20 * 10ms ).
	gpio_led_uart3_dly = 20;
}
// UART #3 inactive LED off.
void GPIO_LED_UART3_Inactive( void )
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	// PC13 output low.
	GPIOC->BSRR = 0x20000000;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <GPIO_LED_UART3_Inactive+0x18>)
 800041e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000422:	619a      	str	r2, [r3, #24]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	48000800 	.word	0x48000800

08000434 <GPIO_Btn_Task>:


// Button input task.
void GPIO_Btn_Task( void )
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

	uint32_t temp;
	uint32_t current_btn_input;

	// Button debounce count check.
	if( gpio_btn_dbc < 2 )
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <GPIO_Btn_Task+0xb8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d94d      	bls.n	80004de <GPIO_Btn_Task+0xaa>
	{
		// Not done.
		return;
	}
	// Clear count.
	gpio_btn_dbc = 0;
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <GPIO_Btn_Task+0xb8>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]

	// Read button input from IO port.
	temp = GPIOC->IDR;
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <GPIO_Btn_Task+0xbc>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	607b      	str	r3, [r7, #4]
	temp &= 0x00000360;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8000454:	607b      	str	r3, [r7, #4]

	// Combine with previous input.
	current_btn_input = gpio_btn_pre;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <GPIO_Btn_Task+0xc0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	603b      	str	r3, [r7, #0]
	current_btn_input |= temp;
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	603b      	str	r3, [r7, #0]

	// Keep as previous.
	gpio_btn_pre = temp;
 8000464:	4a23      	ldr	r2, [pc, #140]	; (80004f4 <GPIO_Btn_Task+0xc0>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6013      	str	r3, [r2, #0]

	// Button #1 check.
	if( current_btn_input == 0x0340 )
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000470:	d131      	bne.n	80004d6 <GPIO_Btn_Task+0xa2>
	{
		// Button hold check.
		temp = gpio_btn_flag;
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <GPIO_Btn_Task+0xc4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	607b      	str	r3, [r7, #4]
		temp &= 0x0020;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f003 0320 	and.w	r3, r3, #32
 800047e:	607b      	str	r3, [r7, #4]
		if( temp == 0x0020  )
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b20      	cmp	r3, #32
 8000484:	d02d      	beq.n	80004e2 <GPIO_Btn_Task+0xae>
			// Still hold.
			return;
		}
		// Not hold.
		// Set flag bit.
		gpio_btn_flag |= 0x0020;
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <GPIO_Btn_Task+0xc4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <GPIO_Btn_Task+0xc4>)
 8000490:	6013      	str	r3, [r2, #0]

		// UART #1 test.
		uart1_tx_data[ 0 ] = 0x41;
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <GPIO_Btn_Task+0xc8>)
 8000494:	2241      	movs	r2, #65	; 0x41
 8000496:	701a      	strb	r2, [r3, #0]
		uart1_tx_cnt = 1;
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <GPIO_Btn_Task+0xcc>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
		uart1_flag |= 0x01;
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <GPIO_Btn_Task+0xd0>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <GPIO_Btn_Task+0xd0>)
 80004ac:	701a      	strb	r2, [r3, #0]

		// UART #3 test.
		uart3_tx_data[ 0 ] = 0x41;
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <GPIO_Btn_Task+0xd4>)
 80004b0:	2241      	movs	r2, #65	; 0x41
 80004b2:	701a      	strb	r2, [r3, #0]
		uart3_tx_cnt = 1;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <GPIO_Btn_Task+0xd8>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
		uart3_flag |= 0x01;
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <GPIO_Btn_Task+0xdc>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <GPIO_Btn_Task+0xdc>)
 80004c8:	701a      	strb	r2, [r3, #0]

		// Buzzer test.
		Buzzer_On();
 80004ca:	f7ff fe7d 	bl	80001c8 <Buzzer_On>
		// Keep going 50 * 10ms.
		bz_dly = 20;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <GPIO_Btn_Task+0xe0>)
 80004d0:	2214      	movs	r2, #20
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	e006      	b.n	80004e4 <GPIO_Btn_Task+0xb0>
	}
	else
	{
		// Button release or no press;
		// Release button status.
		gpio_btn_flag = 0x0000;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <GPIO_Btn_Task+0xc4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e002      	b.n	80004e4 <GPIO_Btn_Task+0xb0>
		return;
 80004de:	bf00      	nop
 80004e0:	e000      	b.n	80004e4 <GPIO_Btn_Task+0xb0>
			return;
 80004e2:	bf00      	nop
	}

}
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000034 	.word	0x20000034
 80004f0:	48000800 	.word	0x48000800
 80004f4:	200000bc 	.word	0x200000bc
 80004f8:	200000b8 	.word	0x200000b8
 80004fc:	20000038 	.word	0x20000038
 8000500:	200000c9 	.word	0x200000c9
 8000504:	200000c8 	.word	0x200000c8
 8000508:	20000068 	.word	0x20000068
 800050c:	2000005d 	.word	0x2000005d
 8000510:	2000005f 	.word	0x2000005f
 8000514:	20000028 	.word	0x20000028

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <Speed_Init>:
#include <stm32f3xx.h>
#include "Speed_Task.h"

// Speed task initialize.
void Speed_Init( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// APB2 ( 64MHz ).
	// Timer #2 peripheral clock enable ( bit #1 = 1 ).
	RCC->APB1ENR |= 0x00000001;
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <Speed_Init+0x78>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <Speed_Init+0x78>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	61d3      	str	r3, [r2, #28]

	// Prescaler value 1.
	TIM2->PSC = 63;
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	223f      	movs	r2, #63	; 0x3f
 800056a:	629a      	str	r2, [r3, #40]	; 0x28

	// CC1S = 0x1, ( bit #1 ~ 0, 0x1 )
	// CC2S = 0x2, ( bit #9 ~ 8, 0x2 )
	TIM2->CCMR1 |= 0x00000201;
 800056c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6193      	str	r3, [r2, #24]

	// CC2NP = 0, ( bit #7, 0 ).
	// CC2P = 1, ( bit #5, 1 ).
	// CC1NP = 1, ( bit #3, 1 ).
	// CC1P = 0, ( bit #1, 0 ).
	TIM2->CCER = 0x00000028;
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	2228      	movs	r2, #40	; 0x28
 8000586:	621a      	str	r2, [r3, #32]

	// TS = 0x5, ( bit #6 ~ 4, 0x5 )
	// SMS = 0x4, ( bit #16, #2~0, 0x4 )
	TIM2->SMCR = 0x00000054;
 8000588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058c:	2254      	movs	r2, #84	; 0x54
 800058e:	609a      	str	r2, [r3, #8]

	// CC2E = 1 ( bit #4 ).
	// CC1E = 1 ( bit #0 ).
	TIM2->CCER |= 0x00000011;
 8000590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059a:	f043 0311 	orr.w	r3, r3, #17
 800059e:	6213      	str	r3, [r2, #32]

	// Enable CC1 interrupt.
	TIM2->DIER |= 0x02;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	60d3      	str	r3, [r2, #12]
	// Enable IRQ.
	NVIC_EnableIRQ( TIM2_IRQn );
 80005b0:	201c      	movs	r0, #28
 80005b2:	f7ff ffb1 	bl	8000518 <__NVIC_EnableIRQ>
	// Enable timer #2 ( bit #0, 1 ).
	TIM2->CR1 |= 0x0001;
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <Speed_Calculate>:

// Speed calculate.
void Speed_Calculate( void )
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	//uint8_t delta_sign;
	//uint32_t delta_value;

	// Check sampling count.
	if( speed_sample_cnt < 3 )
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <Speed_Calculate+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d903      	bls.n	80005e6 <Speed_Calculate+0x16>
	{
		return;
	}

	// Clear count.
	speed_sample_cnt = 0;
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <Speed_Calculate+0x20>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e000      	b.n	80005e8 <Speed_Calculate+0x18>
		return;
 80005e6:	bf00      	nop
}
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <Timer_Tick>:
#include "GPIO_Task.h"
#include "Buzzer_Task.h"

// Timer tick task.
void Timer_Tick( void )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	// Check time base count.
	if( time_base_cnt_10ms < 9 )
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <Timer_Tick+0xfc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d974      	bls.n	80006ea <Timer_Tick+0xf6>
	{
		// Not done.
		return;
	}
	//
	time_base_cnt_10ms = 0;
 8000600:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <Timer_Tick+0xfc>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]

	// About 10ms past.

	// Increase button debounce count.
	++gpio_btn_dbc;
 8000606:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <Timer_Tick+0x100>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a39      	ldr	r2, [pc, #228]	; (80006f4 <Timer_Tick+0x100>)
 800060e:	6013      	str	r3, [r2, #0]

	// UART #1 RX timeout check.
	if( uart1_rx_cnt )
 8000610:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <Timer_Tick+0x104>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00e      	beq.n	8000638 <Timer_Tick+0x44>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart1_rx_to;
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <Timer_Tick+0x108>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a36      	ldr	r2, [pc, #216]	; (80006fc <Timer_Tick+0x108>)
 8000622:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 50 * 10ms ).
		if( tmr_uart1_rx_to == 50 )
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <Timer_Tick+0x108>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b32      	cmp	r3, #50	; 0x32
 800062a:	d105      	bne.n	8000638 <Timer_Tick+0x44>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart1_rx_to = 0;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <Timer_Tick+0x108>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
			uart1_rx_cnt = 0;
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <Timer_Tick+0x104>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		}
	}

	// UART #2 RX timeout check.
	if( uart2_rx_cnt )
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <Timer_Tick+0x10c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00e      	beq.n	8000660 <Timer_Tick+0x6c>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart2_rx_to;
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <Timer_Tick+0x110>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <Timer_Tick+0x110>)
 800064a:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 200 * 10ms for human key board input ).
		if( tmr_uart2_rx_to == 200 )
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <Timer_Tick+0x110>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2bc8      	cmp	r3, #200	; 0xc8
 8000652:	d105      	bne.n	8000660 <Timer_Tick+0x6c>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart2_rx_to = 0;
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <Timer_Tick+0x110>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
			uart2_rx_cnt = 0;
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <Timer_Tick+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		}
	}

	// UART #3 RX timeout check.
	if( uart3_rx_cnt )
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <Timer_Tick+0x114>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00e      	beq.n	8000688 <Timer_Tick+0x94>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart3_rx_to;
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <Timer_Tick+0x118>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <Timer_Tick+0x118>)
 8000672:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 50 * 10ms ).
		if( tmr_uart3_rx_to == 50 )
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <Timer_Tick+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b32      	cmp	r3, #50	; 0x32
 800067a:	d105      	bne.n	8000688 <Timer_Tick+0x94>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart3_rx_to = 0;
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <Timer_Tick+0x118>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <Timer_Tick+0x114>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		}
	}

	// CAN bus active LED.
	if( gpio_led_can_dly )
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <Timer_Tick+0x11c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <Timer_Tick+0xa8>
	{
		--gpio_led_can_dly;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <Timer_Tick+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <Timer_Tick+0x11c>)
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	e001      	b.n	80006a0 <Timer_Tick+0xac>
	}
	else
	{
		GPIO_LED_CAN_Inactive();
 800069c:	f7ff fea0 	bl	80003e0 <GPIO_LED_CAN_Inactive>
	}

	// UART #1 active LED.
	if( gpio_led_uart1_dly )
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <Timer_Tick+0x120>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <Timer_Tick+0xc0>
	{
		--gpio_led_uart1_dly;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <Timer_Tick+0x120>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a19      	ldr	r2, [pc, #100]	; (8000714 <Timer_Tick+0x120>)
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e001      	b.n	80006b8 <Timer_Tick+0xc4>
	}
	else
	{
		GPIO_LED_UART1_Inactive();
 80006b4:	f7ff fea2 	bl	80003fc <GPIO_LED_UART1_Inactive>
	}

	// UART #3 active LED.
	if( gpio_led_uart3_dly )
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <Timer_Tick+0x124>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <Timer_Tick+0xd8>
	{
		--gpio_led_uart3_dly;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <Timer_Tick+0x124>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <Timer_Tick+0x124>)
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e001      	b.n	80006d0 <Timer_Tick+0xdc>
	}
	else
	{
		GPIO_LED_UART3_Inactive();
 80006cc:	f7ff fea4 	bl	8000418 <GPIO_LED_UART3_Inactive>
	}

	// Buzzer keep going.
	if( bz_dly )
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <Timer_Tick+0x128>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <Timer_Tick+0xf0>
	{
		// Decrease keep count.
		--bz_dly;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <Timer_Tick+0x128>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <Timer_Tick+0x128>)
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	e003      	b.n	80006ec <Timer_Tick+0xf8>
	}
	else
	{
		// Turn off buzzer.
		Buzzer_Off();
 80006e4:	f7ff fd86 	bl	80001f4 <Buzzer_Off>
 80006e8:	e000      	b.n	80006ec <Timer_Tick+0xf8>
		return;
 80006ea:	bf00      	nop
	}

}
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000ec 	.word	0x200000ec
 80006f4:	20000034 	.word	0x20000034
 80006f8:	20000060 	.word	0x20000060
 80006fc:	200000f0 	.word	0x200000f0
 8000700:	2000002c 	.word	0x2000002c
 8000704:	200000f4 	.word	0x200000f4
 8000708:	2000002e 	.word	0x2000002e
 800070c:	200000e8 	.word	0x200000e8
 8000710:	20000030 	.word	0x20000030
 8000714:	200000c4 	.word	0x200000c4
 8000718:	20000064 	.word	0x20000064
 800071c:	20000028 	.word	0x20000028

08000720 <UART2_Rec_Task>:

}

// UART #2 received data resolution task
void UART2_Rec_Task( void )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	uint8_t temp;

	// Check received count.
	if( uart2_rx_cnt < 4 )
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <UART2_Rec_Task+0x70>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b03      	cmp	r3, #3
 800072e:	d926      	bls.n	800077e <UART2_Rec_Task+0x5e>
	{
		// Received data too few.
		return;
	}
	// Clear received count.
	uart2_rx_cnt = 0;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <UART2_Rec_Task+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	// Resolution received data.
	// Check end character #2.
	if( uart2_rx_data[3] != 0x0a )
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <UART2_Rec_Task+0x74>)
 8000738:	78db      	ldrb	r3, [r3, #3]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d120      	bne.n	8000782 <UART2_Rec_Task+0x62>
	{
		// Not match.
		return;
	}
	// Check end character #2.
	if( uart2_rx_data[2] != 0x0d )
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <UART2_Rec_Task+0x74>)
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b0d      	cmp	r3, #13
 8000748:	d11d      	bne.n	8000786 <UART2_Rec_Task+0x66>
		return;
	}

	// Update DAC output.
	// high quad.
	temp = Char_to_Int( uart2_rx_data[0] );
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <UART2_Rec_Task+0x74>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fda1 	bl	8000298 <Char_to_Int>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	temp <<= 4;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	71fb      	strb	r3, [r7, #7]
	// low quad.
	temp |= Char_to_Int( uart2_rx_data[1] );
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <UART2_Rec_Task+0x74>)
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd96 	bl	8000298 <Char_to_Int>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4313      	orrs	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
	// Write DAC data.
	DAC1->DHR8R1 = temp;
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <UART2_Rec_Task+0x78>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	6113      	str	r3, [r2, #16]
 800077c:	e004      	b.n	8000788 <UART2_Rec_Task+0x68>
		return;
 800077e:	bf00      	nop
 8000780:	e002      	b.n	8000788 <UART2_Rec_Task+0x68>
		return;
 8000782:	bf00      	nop
 8000784:	e000      	b.n	8000788 <UART2_Rec_Task+0x68>
		return;
 8000786:	bf00      	nop
}
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000002c 	.word	0x2000002c
 8000794:	2000004c 	.word	0x2000004c
 8000798:	40007400 	.word	0x40007400

0800079c <UART1_Trn_Task>:

}

// UART #1 data transmit task.
void UART1_Trn_Task( void )
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	uint32_t temp;

	// Check TX empty flag bit, bit #7.
	temp = USART1->ISR;
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <UART1_Trn_Task+0xb0>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	607b      	str	r3, [r7, #4]
	temp &= 0x80;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	607b      	str	r3, [r7, #4]
	if( temp == 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d043      	beq.n	800083e <UART1_Trn_Task+0xa2>
	{
		// Not empty.
		return;
	}
	// Check TX data count.
	if( uart1_tx_cnt == 0 )
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <UART1_Trn_Task+0xb4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10c      	bne.n	80007da <UART1_Trn_Task+0x3e>
	{
		// Check TC flag bit, bit #6.
		temp = USART1->ISR;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <UART1_Trn_Task+0xb0>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	607b      	str	r3, [r7, #4]
		temp &= 0x40;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007cc:	607b      	str	r3, [r7, #4]
		if( temp )
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d036      	beq.n	8000842 <UART1_Trn_Task+0xa6>
		{
			// RS485 receive enable.
			GPIO_UART1_485_RE();
 80007d4:	f7ff fda4 	bl	8000320 <GPIO_UART1_485_RE>
		}

		return;
 80007d8:	e033      	b.n	8000842 <UART1_Trn_Task+0xa6>
	}
	else
	{
		// Check status flag bit #0, TX task trigger on.
		temp = uart1_flag;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <UART1_Trn_Task+0xb8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	607b      	str	r3, [r7, #4]
		temp &= 0x01;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
		if( temp )
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00d      	beq.n	800080c <UART1_Trn_Task+0x70>
		{
			// RS485 transmit enable.
			GPIO_UART1_485_DE();
 80007f0:	f7ff fd8a 	bl	8000308 <GPIO_UART1_485_DE>
			// Reset index count.
			uart1_tx_index = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <UART1_Trn_Task+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
			// Reset flag bit.
			uart1_flag &= 0xfe;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <UART1_Trn_Task+0xb8>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <UART1_Trn_Task+0xb8>)
 8000808:	701a      	strb	r2, [r3, #0]

			return;
 800080a:	e01b      	b.n	8000844 <UART1_Trn_Task+0xa8>
		}
	}

	// Output data via UART.
	USART1->TDR = uart1_tx_data[ uart1_tx_index ];
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <UART1_Trn_Task+0xbc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <UART1_Trn_Task+0xc0>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <UART1_Trn_Task+0xb0>)
 800081c:	b292      	uxth	r2, r2
 800081e:	851a      	strh	r2, [r3, #40]	; 0x28
	// For next byte data.
	--uart1_tx_cnt;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <UART1_Trn_Task+0xb4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <UART1_Trn_Task+0xb4>)
 800082c:	701a      	strb	r2, [r3, #0]
	++uart1_tx_index;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <UART1_Trn_Task+0xbc>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <UART1_Trn_Task+0xbc>)
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e002      	b.n	8000844 <UART1_Trn_Task+0xa8>
		return;
 800083e:	bf00      	nop
 8000840:	e000      	b.n	8000844 <UART1_Trn_Task+0xa8>
		return;
 8000842:	bf00      	nop
}
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40013800 	.word	0x40013800
 8000850:	200000c9 	.word	0x200000c9
 8000854:	200000c8 	.word	0x200000c8
 8000858:	2000005e 	.word	0x2000005e
 800085c:	20000038 	.word	0x20000038

08000860 <UART3_Trn_Task>:
	++uart2_tx_index;
}

// UART #3 data transmit task.
void UART3_Trn_Task( void )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	uint32_t temp;

	// Check TX empty flag bit, bit #7.
	temp = USART3->ISR;
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <UART3_Trn_Task+0xb0>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	607b      	str	r3, [r7, #4]
	temp &= 0x80;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	607b      	str	r3, [r7, #4]
	if( temp == 0 )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d043      	beq.n	8000902 <UART3_Trn_Task+0xa2>
		// Not empty.
		return;
	}

	// Check TX data count.
	if( uart3_tx_cnt == 0 )
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <UART3_Trn_Task+0xb4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10c      	bne.n	800089e <UART3_Trn_Task+0x3e>
	{
		// Check TC flag bit, bit #6.
		temp = USART3->ISR;
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <UART3_Trn_Task+0xb0>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	607b      	str	r3, [r7, #4]
		temp &= 0x40;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	607b      	str	r3, [r7, #4]
		if( temp )
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d036      	beq.n	8000906 <UART3_Trn_Task+0xa6>
		{
			// RS485 receive enable.
			GPIO_UART3_485_RE();
 8000898:	f7ff fd5c 	bl	8000354 <GPIO_UART3_485_RE>
		}

		return;
 800089c:	e033      	b.n	8000906 <UART3_Trn_Task+0xa6>
	}
	else
	{
		// Check status flag bit #0, TX task trigger on.
		temp = uart3_flag;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <UART3_Trn_Task+0xb8>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	607b      	str	r3, [r7, #4]
		temp &= 0x01;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
		if( temp )
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00d      	beq.n	80008d0 <UART3_Trn_Task+0x70>
		{
			// RS485 transmit enable.
			GPIO_UART3_485_DE();
 80008b4:	f7ff fd42 	bl	800033c <GPIO_UART3_485_DE>
			// Reset index count.
			uart3_tx_index = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <UART3_Trn_Task+0xbc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
			// Reset flag bit.
			uart3_flag &= 0xfe;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <UART3_Trn_Task+0xb8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f023 0301 	bic.w	r3, r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <UART3_Trn_Task+0xb8>)
 80008cc:	701a      	strb	r2, [r3, #0]

			return;
 80008ce:	e01b      	b.n	8000908 <UART3_Trn_Task+0xa8>
		}
	}


	// Data output via UART.
	USART3->TDR = uart3_tx_data[ uart3_tx_index ];
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <UART3_Trn_Task+0xbc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <UART3_Trn_Task+0xc0>)
 80008da:	5c9b      	ldrb	r3, [r3, r2]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <UART3_Trn_Task+0xb0>)
 80008e0:	b292      	uxth	r2, r2
 80008e2:	851a      	strh	r2, [r3, #40]	; 0x28
	// For next byte data.
	--uart3_tx_cnt;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <UART3_Trn_Task+0xb4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <UART3_Trn_Task+0xb4>)
 80008f0:	701a      	strb	r2, [r3, #0]
	++uart3_tx_index;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <UART3_Trn_Task+0xbc>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <UART3_Trn_Task+0xbc>)
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	e002      	b.n	8000908 <UART3_Trn_Task+0xa8>
		return;
 8000902:	bf00      	nop
 8000904:	e000      	b.n	8000908 <UART3_Trn_Task+0xa8>
		return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004800 	.word	0x40004800
 8000914:	2000005d 	.word	0x2000005d
 8000918:	2000005f 	.word	0x2000005f
 800091c:	200000a1 	.word	0x200000a1
 8000920:	20000068 	.word	0x20000068

08000924 <__NVIC_EnableIRQ>:
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <__NVIC_EnableIRQ+0x38>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f000 fd9e 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f848 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096c:	f000 fa02 	bl	8000d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000970:	f000 f960 	bl	8000c34 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000974:	f000 f90e 	bl	8000b94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000978:	f000 f9ac 	bl	8000cd4 <MX_USART3_UART_Init>
  MX_CAN_Init();
 800097c:	f000 f898 	bl	8000ab0 <MX_CAN_Init>
  MX_DAC_Init();
 8000980:	f000 f8ca 	bl	8000b18 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  Speed_Init();
 8000984:	f7ff fde6 	bl	8000554 <Speed_Init>


  //
  GPIO_UART1_485_RE();
 8000988:	f7ff fcca 	bl	8000320 <GPIO_UART1_485_RE>
  GPIO_UART3_485_RE();
 800098c:	f7ff fce2 	bl	8000354 <GPIO_UART3_485_RE>

  //
  GPIO_LED1_Off();
 8000990:	f7ff fcee 	bl	8000370 <GPIO_LED1_Off>
  GPIO_LED2_Off();
 8000994:	f7ff fcfa 	bl	800038c <GPIO_LED2_Off>
  GPIO_LED3_Off();
 8000998:	f7ff fd06 	bl	80003a8 <GPIO_LED3_Off>
  GPIO_LED4_Off();
 800099c:	f7ff fd12 	bl	80003c4 <GPIO_LED4_Off>

  //
  uart1_tx_cnt = 0;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x84>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
  uart2_tx_cnt = 0;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <main+0x88>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
  uart3_tx_cnt = 0;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

  //
  uart1_flag = 0x00;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <main+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  uart2_flag = 0x00;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <main+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  uart3_flag = 0x00;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <main+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]


  Buzzer_Init();
 80009c4:	f7ff fc26 	bl	8000214 <Buzzer_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Timer tick, loop task.
	  Timer_Tick();
 80009c8:	f7ff fe14 	bl	80005f4 <Timer_Tick>

	  // UART #1 transmit test.
	  UART1_Trn_Task();
 80009cc:	f7ff fee6 	bl	800079c <UART1_Trn_Task>
	  // UART #3 transmit test.
	  UART3_Trn_Task();
 80009d0:	f7ff ff46 	bl	8000860 <UART3_Trn_Task>

	  // UART #2 received task.
	  UART2_Rec_Task();
 80009d4:	f7ff fea4 	bl	8000720 <UART2_Rec_Task>

	  // Button task.
	  GPIO_Btn_Task();
 80009d8:	f7ff fd2c 	bl	8000434 <GPIO_Btn_Task>

	  //
	  Speed_Calculate();
 80009dc:	f7ff fdf8 	bl	80005d0 <Speed_Calculate>
	  Timer_Tick();
 80009e0:	e7f2      	b.n	80009c8 <main+0x68>
 80009e2:	bf00      	nop
 80009e4:	200000c9 	.word	0x200000c9
 80009e8:	20000061 	.word	0x20000061
 80009ec:	2000005d 	.word	0x2000005d
 80009f0:	200000c8 	.word	0x200000c8
 80009f4:	2000002d 	.word	0x2000002d
 80009f8:	2000005f 	.word	0x2000005f

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a06:	2228      	movs	r2, #40	; 0x28
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fa96 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2234      	movs	r2, #52	; 0x34
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa88 	bl	8003f3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a36:	2301      	movs	r3, #1
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a48:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fa0a 	bl	8001e6c <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a5e:	f000 fa4d 	bl	8000efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f8fc 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a8a:	f000 fa37 	bl	8000efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fb25 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000aa4:	f000 fa2a 	bl	8000efc <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3770      	adds	r7, #112	; 0x70
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <MX_CAN_Init+0x64>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_CAN_Init+0x60>)
 8000abc:	2210      	movs	r2, #16
 8000abe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_CAN_Init+0x60>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_CAN_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_CAN_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_CAN_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_CAN_Init+0x60>)
 8000afe:	f000 fd37 	bl	8001570 <HAL_CAN_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f9f8 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	40006400 	.word	0x40006400

08000b18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  // Enable clock.
  __HAL_RCC_DAC1_CLK_ENABLE();
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_DAC_Init+0x70>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <MX_DAC_Init+0x70>)
 8000b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_DAC_Init+0x70>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_DAC_Init+0x74>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_DAC_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b46:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_DAC_Init+0x74>)
 8000b48:	f000 ff1f 	bl	800198a <HAL_DAC_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_DAC_Init+0x3e>
  {
    Error_Handler();
 8000b52:	f000 f9d3 	bl	8000efc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <MX_DAC_Init+0x74>)
 8000b66:	f000 ff32 	bl	80019ce <HAL_DAC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000b70:	f000 f9c4 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  // Enable.
  DAC->CR |= 0x00000001;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_DAC_Init+0x78>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <MX_DAC_Init+0x78>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DAC_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	20000228 	.word	0x20000228
 8000b90:	40007400 	.word	0x40007400

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

	__HAL_RCC_USART1_CLK_ENABLE();
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <MX_USART1_UART_Init+0x9c>)
 8000bb6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bbe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000bf2:	f002 fc0b 	bl	800340c <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000bfc:	f000 f97e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART1->CR1 |= 0x20;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART1_UART_Init+0x9c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <MX_USART1_UART_Init+0x9c>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART1_IRQn );
 8000c0c:	2025      	movs	r0, #37	; 0x25
 8000c0e:	f7ff fe89 	bl	8000924 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART1->CR1 |= 0x01;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <MX_USART1_UART_Init+0x9c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <MX_USART1_UART_Init+0x9c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	200001a4 	.word	0x200001a4
 8000c30:	40013800 	.word	0x40013800

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	__HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c54:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <MX_USART2_UART_Init+0x9c>)
 8000c56:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c5a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c5e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c74:	220c      	movs	r2, #12
 8000c76:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c90:	480e      	ldr	r0, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c92:	f002 fbbb 	bl	800340c <HAL_UART_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c9c:	f000 f92e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART2->CR1 |= 0x20;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x9c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <MX_USART2_UART_Init+0x9c>)
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART2_IRQn );
 8000cac:	2026      	movs	r0, #38	; 0x26
 8000cae:	f7ff fe39 	bl	8000924 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART2->CR1 |= 0x01;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_USART2_UART_Init+0x9c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x9c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	2000023c 	.word	0x2000023c
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

	__HAL_RCC_USART3_CLK_ENABLE();
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_USART3_UART_Init+0x94>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <MX_USART3_UART_Init+0x94>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_USART3_UART_Init+0x94>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000cf6:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000cfa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cfe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d14:	220c      	movs	r2, #12
 8000d16:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_USART3_UART_Init+0x98>)
 8000d32:	f002 fb6b 	bl	800340c <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000d3c:	f000 f8de 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART3->CR1 |= 0x20;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART3_IRQn );
 8000d4c:	2027      	movs	r0, #39	; 0x27
 8000d4e:	f7ff fde9 	bl	8000924 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART3->CR1 |= 0x01;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <MX_USART3_UART_Init+0x9c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART3_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	200000f8 	.word	0x200000f8
 8000d70:	40004800 	.word	0x40004800

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b58      	ldr	r3, [pc, #352]	; (8000eec <MX_GPIO_Init+0x178>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a57      	ldr	r2, [pc, #348]	; (8000eec <MX_GPIO_Init+0x178>)
 8000d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b55      	ldr	r3, [pc, #340]	; (8000eec <MX_GPIO_Init+0x178>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da2:	4b52      	ldr	r3, [pc, #328]	; (8000eec <MX_GPIO_Init+0x178>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a51      	ldr	r2, [pc, #324]	; (8000eec <MX_GPIO_Init+0x178>)
 8000da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <MX_GPIO_Init+0x178>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b49      	ldr	r3, [pc, #292]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a45      	ldr	r2, [pc, #276]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <MX_GPIO_Init+0x178>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <MX_GPIO_Init+0x178>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a3f      	ldr	r2, [pc, #252]	; (8000eec <MX_GPIO_Init+0x178>)
 8000df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_GPIO_Init+0x178>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000e08:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <MX_GPIO_Init+0x17c>)
 8000e0a:	f001 f817 	bl	8001e3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f001 f811 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|LD2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f242 0106 	movw	r1, #8198	; 0x2006
 8000e20:	4834      	ldr	r0, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0x180>)
 8000e22:	f001 f80b 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <MX_GPIO_Init+0x184>)
 8000e2c:	f001 f806 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8000e30:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e34:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <MX_GPIO_Init+0x17c>)
 8000e4a:	f000 fe85 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fe74 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f000 fe65 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000e8e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_GPIO_Init+0x17c>)
 8000ea4:	f000 fe58 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|LD2_Pin;
 8000ea8:	f242 0306 	movw	r3, #8198	; 0x2006
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_GPIO_Init+0x180>)
 8000ec2:	f000 fe49 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_GPIO_Init+0x184>)
 8000ede:	f000 fe3b 	bl	8001b58 <HAL_GPIO_Init>

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48000c00 	.word	0x48000c00

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x44>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x44>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x44>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_MspInit+0x44>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_MspInit+0x44>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3e:	2007      	movs	r0, #7
 8000f40:	f000 fce2 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_CAN_MspInit+0x80>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d129      	bne.n	8000fc6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_CAN_MspInit+0x84>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f000 fdc9 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40006400 	.word	0x40006400
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_DAC_MspInit+0x74>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d124      	bne.n	8001044 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8001000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_DAC_MspInit+0x78>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800102a:	2310      	movs	r3, #16
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f000 fd8a 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40007400 	.word	0x40007400
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <HAL_UART_MspInit+0x16c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d132      	bne.n	80010dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a52      	ldr	r2, [pc, #328]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6153      	str	r3, [r2, #20]
 800109a:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b8:	2307      	movs	r3, #7
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f000 fd47 	bl	8001b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2025      	movs	r0, #37	; 0x25
 80010d0:	f000 fc25 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010d4:	2025      	movs	r0, #37	; 0x25
 80010d6:	f000 fc3e 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010da:	e06c      	b.n	80011b6 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_UART_MspInit+0x174>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d131      	bne.n	800114a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_UART_MspInit+0x170>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <HAL_UART_MspInit+0x170>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_UART_MspInit+0x170>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001116:	230c      	movs	r3, #12
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001126:	2307      	movs	r3, #7
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fd10 	bl	8001b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fbee 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fc07 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 8001148:	e035      	b.n	80011b6 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_UART_MspInit+0x178>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d130      	bne.n	80011b6 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800115a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115e:	61d3      	str	r3, [r2, #28]
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0x170>)
 8001172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001176:	6153      	str	r3, [r2, #20]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_UART_MspInit+0x170>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001184:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001196:	2307      	movs	r3, #7
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <HAL_UART_MspInit+0x17c>)
 80011a2:	f000 fcd9 	bl	8001b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2027      	movs	r0, #39	; 0x27
 80011ac:	f000 fbb7 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011b0:	2027      	movs	r0, #39	; 0x27
 80011b2:	f000 fbd0 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40004400 	.word	0x40004400
 80011cc:	40004800 	.word	0x40004800
 80011d0:	48000400 	.word	0x48000400

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f986 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //
  ++time_base_cnt_10ms;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <SysTick_Handler+0x18>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a02      	ldr	r2, [pc, #8]	; (8001234 <SysTick_Handler+0x18>)
 800122c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000ec 	.word	0x200000ec

08001238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART1->ISR;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <USART1_IRQHandler+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	607b      	str	r3, [r7, #4]
	if( temp )
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d018      	beq.n	8001284 <USART1_IRQHandler+0x4c>
	{
		// Reset timeout count.
		tmr_uart1_rx_to = 0;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <USART1_IRQHandler+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart1_rx_data[ uart1_rx_cnt ] = ( uint8_t )USART1->RDR;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <USART1_IRQHandler+0x5c>)
 800125a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800125c:	b299      	uxth	r1, r3
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <USART1_IRQHandler+0x64>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	b2c9      	uxtb	r1, r1
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <USART1_IRQHandler+0x68>)
 800126a:	5499      	strb	r1, [r3, r2]

		// Increase data received count.
		if( uart1_rx_cnt < FJBSCT_UART1_REC_MAX )
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <USART1_IRQHandler+0x64>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d806      	bhi.n	8001284 <USART1_IRQHandler+0x4c>
		{
			++uart1_rx_cnt;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <USART1_IRQHandler+0x64>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <USART1_IRQHandler+0x64>)
 8001282:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <USART1_IRQHandler+0x6c>)
 8001286:	f002 f90f 	bl	80034a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40013800 	.word	0x40013800
 8001298:	200000f0 	.word	0x200000f0
 800129c:	20000060 	.word	0x20000060
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	200001a4 	.word	0x200001a4

080012a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART2->ISR;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <USART2_IRQHandler+0x70>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	607b      	str	r3, [r7, #4]
	if( temp )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d022      	beq.n	8001308 <USART2_IRQHandler+0x60>
	{
		// Reset timeout count.
		tmr_uart2_rx_to = 0;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <USART2_IRQHandler+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart2_rx_data[ uart2_rx_cnt ] = ( uint8_t )USART2->RDR;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <USART2_IRQHandler+0x70>)
 80012ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012cc:	b299      	uxth	r1, r3
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <USART2_IRQHandler+0x78>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	b2c9      	uxtb	r1, r1
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <USART2_IRQHandler+0x7c>)
 80012da:	5499      	strb	r1, [r3, r2]
		// Feed back.
		USART2->TDR = uart2_rx_data[ uart2_rx_cnt ];
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <USART2_IRQHandler+0x78>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <USART2_IRQHandler+0x7c>)
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <USART2_IRQHandler+0x70>)
 80012ec:	b292      	uxth	r2, r2
 80012ee:	851a      	strh	r2, [r3, #40]	; 0x28

		if( uart2_rx_cnt < FJBSCT_UART2_REC_MAX )
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <USART2_IRQHandler+0x78>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d806      	bhi.n	8001308 <USART2_IRQHandler+0x60>
		{
			++uart2_rx_cnt;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <USART2_IRQHandler+0x78>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <USART2_IRQHandler+0x78>)
 8001306:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <USART2_IRQHandler+0x80>)
 800130a:	f002 f8cd 	bl	80034a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	200000f4 	.word	0x200000f4
 8001320:	2000002c 	.word	0x2000002c
 8001324:	2000004c 	.word	0x2000004c
 8001328:	2000023c 	.word	0x2000023c

0800132c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART3->ISR;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <USART3_IRQHandler+0x5c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	607b      	str	r3, [r7, #4]
	if( temp )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d018      	beq.n	8001378 <USART3_IRQHandler+0x4c>
	{
		// Reset timeout count.
		tmr_uart3_rx_to = 0;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <USART3_IRQHandler+0x60>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart3_rx_data[ uart3_rx_cnt ] = ( uint8_t )USART3->RDR;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <USART3_IRQHandler+0x5c>)
 800134e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001350:	b299      	uxth	r1, r3
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <USART3_IRQHandler+0x64>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <USART3_IRQHandler+0x68>)
 800135e:	5499      	strb	r1, [r3, r2]

		if( uart3_rx_cnt < FJBSCT_UART3_REC_MAX )
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <USART3_IRQHandler+0x64>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b0f      	cmp	r3, #15
 8001368:	d806      	bhi.n	8001378 <USART3_IRQHandler+0x4c>
		{
			++uart3_rx_cnt;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <USART3_IRQHandler+0x64>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <USART3_IRQHandler+0x64>)
 8001376:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <USART3_IRQHandler+0x6c>)
 800137a:	f002 f895 	bl	80034a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004800 	.word	0x40004800
 800138c:	200000e8 	.word	0x200000e8
 8001390:	2000002e 	.word	0x2000002e
 8001394:	2000007c 	.word	0x2000007c
 8001398:	200000f8 	.word	0x200000f8

0800139c <TIM2_IRQHandler>:

/* USER CODE BEGIN 1 */

//
void TIM2_IRQHandler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
	uint16_t temp;

	// Check flag bit.
	temp = TIM2->SR;
 80013a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	80fb      	strh	r3, [r7, #6]
	temp &= 0x06;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f003 0306 	and.w	r3, r3, #6
 80013b0:	80fb      	strh	r3, [r7, #6]
	if( temp != 0 )
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d02c      	beq.n	8001412 <TIM2_IRQHandler+0x76>
	{
		// Check received count.
		if( speed_sample_cnt < 3 )
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <TIM2_IRQHandler+0x84>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d81e      	bhi.n	8001400 <TIM2_IRQHandler+0x64>
		{
			// Keep count value, period value.
			speed_pulse_period[ speed_sample_cnt ] = TIM2->CCR1;
 80013c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <TIM2_IRQHandler+0x84>)
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	4611      	mov	r1, r2
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <TIM2_IRQHandler+0x88>)
 80013d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			// Keep count value, duty value.
			speed_pulse_duty[ speed_sample_cnt ] = TIM2->CCR2;
 80013d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <TIM2_IRQHandler+0x84>)
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e4:	4a10      	ldr	r2, [pc, #64]	; (8001428 <TIM2_IRQHandler+0x8c>)
 80013e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			// Clear count.
			TIM2->CNT = 0;
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
			// Increase count.
			++speed_sample_cnt;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <TIM2_IRQHandler+0x84>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <TIM2_IRQHandler+0x84>)
 80013fe:	701a      	strb	r2, [r3, #0]
		}
		// Clear flag bit.
		TIM2->SR &= 0xf9f9;
 8001400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800140a:	f64f 13f9 	movw	r3, #63993	; 0xf9f9
 800140e:	4013      	ands	r3, r2
 8001410:	610b      	str	r3, [r1, #16]
	}
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200000e4 	.word	0x200000e4
 8001424:	200000d8 	.word	0x200000d8
 8001428:	200000cc 	.word	0x200000cc

0800142c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <LoopForever+0x16>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147a:	f7ff ffd7 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f002 fd39 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff fa6d 	bl	8000960 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001488:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001494:	08003fa4 	.word	0x08003fa4
  ldr r2, =_sbss
 8001498:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800149c:	200002c4 	.word	0x200002c4

080014a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x28>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 fa27 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fd22 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa3f 	bl	8001972 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 fa07 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000008 	.word	0x20000008
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008
 8001554:	200002c0 	.word	0x200002c0

08001558 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;  
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200002c0 	.word	0x200002c0

08001570 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0ed      	b.n	800175e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fcde 	bl	8000f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0202 	bic.w	r2, r2, #2
 80015a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff ffd8 	bl	8001558 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015aa:	e012      	b.n	80015d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ac:	f7ff ffd4 	bl	8001558 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d90b      	bls.n	80015d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2205      	movs	r2, #5
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0c5      	b.n	800175e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e5      	bne.n	80015ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f0:	f7ff ffb2 	bl	8001558 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f6:	e012      	b.n	800161e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f8:	f7ff ffae 	bl	8001558 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d90b      	bls.n	800161e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e09f      	b.n	800175e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0e5      	beq.n	80015f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e007      	b.n	8001656 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7e5b      	ldrb	r3, [r3, #25]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e007      	b.n	8001680 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800167e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e007      	b.n	80016aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0220 	bic.w	r2, r2, #32
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7edb      	ldrb	r3, [r3, #27]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0210 	bic.w	r2, r2, #16
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0210 	orr.w	r2, r2, #16
 80016d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0208 	orr.w	r2, r2, #8
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0208 	bic.w	r2, r2, #8
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7f5b      	ldrb	r3, [r3, #29]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e007      	b.n	8001728 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	ea42 0103 	orr.w	r1, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <__NVIC_SetPriorityGrouping>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e014      	b.n	80019c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fb13 	bl	8000fd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	795b      	ldrb	r3, [r3, #5]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_DAC_ConfigChannel+0x20>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e036      	b.n	8001a5c <HAL_DAC_ConfigChannel+0x8e>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001a02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6819      	ldr	r1, [r3, #0]
 8001a3c:	22c0      	movs	r2, #192	; 0xc0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e020      	b.n	8001ace <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020e 	bic.w	r2, r2, #14
 8001a9a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d005      	beq.n	8001afc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e027      	b.n	8001b4c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
    } 
  }
  return status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e14e      	b.n	8001e06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8140 	beq.w	8001e00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d00b      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b94:	2b11      	cmp	r3, #17
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0xea>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d123      	bne.n	8001c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	6939      	ldr	r1, [r7, #16]
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0203 	and.w	r2, r3, #3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 809a 	beq.w	8001e00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0e:	d013      	beq.n	8001d38 <HAL_GPIO_Init+0x1e0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a46      	ldr	r2, [pc, #280]	; (8001e2c <HAL_GPIO_Init+0x2d4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00d      	beq.n	8001d34 <HAL_GPIO_Init+0x1dc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a45      	ldr	r2, [pc, #276]	; (8001e30 <HAL_GPIO_Init+0x2d8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x1d8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_GPIO_Init+0x2dc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_GPIO_Init+0x1d4>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1e2>
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1e2>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1e2>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1e2>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d4a:	4937      	ldr	r1, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d7c:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x2e0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f aea9 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f000 bef4 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 816a 	beq.w	800216a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e96:	4bb3      	ldr	r3, [pc, #716]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea2:	4bb0      	ldr	r3, [pc, #704]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d159      	bne.n	8001f62 <HAL_RCC_OscConfig+0xf6>
 8001eae:	4bad      	ldr	r3, [pc, #692]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d152      	bne.n	8001f62 <HAL_RCC_OscConfig+0xf6>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_OscConfig+0x82>
 8001ee8:	4b9e      	ldr	r3, [pc, #632]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0xae>
 8001eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f0a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f16:	4b93      	ldr	r3, [pc, #588]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f26:	fa92 f2a2 	rbit	r2, r2
 8001f2a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f2e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 810c 	beq.w	8002168 <HAL_RCC_OscConfig+0x2fc>
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 8106 	bne.w	8002168 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f000 be86 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x110>
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e030      	b.n	8001fde <HAL_RCC_OscConfig+0x172>
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x134>
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a76      	ldr	r2, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01e      	b.n	8001fde <HAL_RCC_OscConfig+0x172>
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x15a>
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6c      	ldr	r2, [pc, #432]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a69      	ldr	r2, [pc, #420]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x172>
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a66      	ldr	r2, [pc, #408]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f023 020f 	bic.w	r2, r3, #15
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	495d      	ldr	r1, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d059      	beq.n	80020b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff faac 	bl	8001558 <HAL_GetTick>
 8002000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002006:	f7ff faa7 	bl	8001558 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d902      	bls.n	800201c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	f000 be29 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
 800201c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002020:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002030:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x1e2>
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x20e>
 800204e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002052:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800206a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002082:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800208e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ab      	beq.n	8002006 <HAL_RCC_OscConfig+0x19a>
 80020ae:	e05c      	b.n	800216a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fa52 	bl	8001558 <HAL_GetTick>
 80020b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ba:	f7ff fa4d 	bl	8001558 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d902      	bls.n	80020d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f000 bdcf 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
 80020d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0x296>
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x2c2>
 8002102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002106:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800211e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_RCC_OscConfig+0x2f8>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002132:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002136:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002142:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ab      	bne.n	80020ba <HAL_RCC_OscConfig+0x24e>
 8002162:	e002      	b.n	800216a <HAL_RCC_OscConfig+0x2fe>
 8002164:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 816f 	beq.w	8002458 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800217a:	4bd0      	ldr	r3, [pc, #832]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002186:	4bcd      	ldr	r3, [pc, #820]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d16c      	bne.n	800226c <HAL_RCC_OscConfig+0x400>
 8002192:	4bca      	ldr	r3, [pc, #808]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d166      	bne.n	800226c <HAL_RCC_OscConfig+0x400>
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0x362>
 80021c8:	4bbc      	ldr	r3, [pc, #752]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e013      	b.n	80021f6 <HAL_RCC_OscConfig+0x38a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021f2:	4bb2      	ldr	r3, [pc, #712]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2202      	movs	r2, #2
 80021f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002208:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_RCC_OscConfig+0x3cc>
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f000 bd1b 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	21f8      	movs	r1, #248	; 0xf8
 8002248:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002250:	fa91 f1a1 	rbit	r1, r1
 8002254:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002258:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800225c:	fab1 f181 	clz	r1, r1
 8002260:	b2c9      	uxtb	r1, r1
 8002262:	408b      	lsls	r3, r1
 8002264:	4995      	ldr	r1, [pc, #596]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e0f5      	b.n	8002458 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8085 	beq.w	8002382 <HAL_RCC_OscConfig+0x516>
 8002278:	2301      	movs	r3, #1
 800227a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800228a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f958 	bl	8001558 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f953 	bl	8001558 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	f000 bcd5 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x488>
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x4b0>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800230c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002322:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800232e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0af      	beq.n	80022ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	21f8      	movs	r1, #248	; 0xf8
 800235e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002366:	fa91 f1a1 	rbit	r1, r1
 800236a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800236e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002372:	fab1 f181 	clz	r1, r1
 8002376:	b2c9      	uxtb	r1, r1
 8002378:	408b      	lsls	r3, r1
 800237a:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e06a      	b.n	8002458 <HAL_RCC_OscConfig+0x5ec>
 8002382:	2301      	movs	r3, #1
 8002384:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002394:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	2300      	movs	r3, #0
 80023ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7ff f8d3 	bl	8001558 <HAL_GetTick>
 80023b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff f8ce 	bl	8001558 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d902      	bls.n	80023ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	f000 bc50 	b.w	8002c6e <HAL_RCC_OscConfig+0xe02>
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_RCC_OscConfig+0x592>
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	e013      	b.n	8002426 <HAL_RCC_OscConfig+0x5ba>
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002416:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x650>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2202      	movs	r2, #2
 8002428:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800242c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002430:	fa92 f2a2 	rbit	r2, r2
 8002434:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002438:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1af      	bne.n	80023b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80da 	beq.w	800261c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d069      	beq.n	8002546 <HAL_RCC_OscConfig+0x6da>
 8002472:	2301      	movs	r3, #1
 8002474:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x654>)
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	2301      	movs	r3, #1
 800249a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff f85c 	bl	8001558 <HAL_GetTick>
 80024a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff f857 	bl	8001558 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d906      	bls.n	80024c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e3d9      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	10908120 	.word	0x10908120
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024f2:	2202      	movs	r2, #2
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002504:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4ba5      	ldr	r3, [pc, #660]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800250e:	2102      	movs	r1, #2
 8002510:	6019      	str	r1, [r3, #0]
 8002512:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f1a3 	rbit	r1, r3
 800251c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002520:	6019      	str	r1, [r3, #0]
  return result;
 8002522:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0b0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x63a>
 8002544:	e06a      	b.n	800261c <HAL_RCC_OscConfig+0x7b0>
 8002546:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002562:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	4b8c      	ldr	r3, [pc, #560]	; (80027a0 <HAL_RCC_OscConfig+0x934>)
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe ffee 	bl	8001558 <HAL_GetTick>
 800257c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	e009      	b.n	8002596 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe ffe9 	bl	8001558 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e36b      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 8002596:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025ca:	2202      	movs	r2, #2
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025de:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80025e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025e6:	2102      	movs	r1, #2
 80025e8:	6019      	str	r1, [r3, #0]
 80025ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f1a3 	rbit	r1, r3
 80025f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025f8:	6019      	str	r1, [r3, #0]
  return result;
 80025fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1b2      	bne.n	8002582 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8158 	beq.w	80028dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b5a      	ldr	r3, [pc, #360]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCC_OscConfig+0x930>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <HAL_RCC_OscConfig+0x938>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11a      	bne.n	80026a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_RCC_OscConfig+0x938>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_RCC_OscConfig+0x938>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267c:	f7fe ff6c 	bl	8001558 <HAL_GetTick>
 8002680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e009      	b.n	800269a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe ff67 	bl	8001558 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e2e9      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_RCC_OscConfig+0x938>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ef      	beq.n	8002686 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x852>
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e02f      	b.n	800271e <HAL_RCC_OscConfig+0x8b2>
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x876>
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e01d      	b.n	800271e <HAL_RCC_OscConfig+0x8b2>
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x89a>
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a2a      	ldr	r2, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x930>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x8b2>
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x930>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06b      	beq.n	8002800 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe ff16 	bl	8001558 <HAL_GetTick>
 800272c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe ff11 	bl	8001558 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e291      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 800274a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800274e:	2202      	movs	r2, #2
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002766:	2202      	movs	r2, #2
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002778:	601a      	str	r2, [r3, #0]
  return result;
 800277a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800277e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_OscConfig+0x93c>
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <HAL_RCC_OscConfig+0x930>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x958>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	10908120 	.word	0x10908120
 80027a4:	40007000 	.word	0x40007000
 80027a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027ac:	2202      	movs	r2, #2
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	4bbb      	ldr	r3, [pc, #748]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027c8:	2102      	movs	r1, #2
 80027ca:	6011      	str	r1, [r2, #0]
 80027cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	fa92 f1a2 	rbit	r1, r2
 80027d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80027da:	6011      	str	r1, [r2, #0]
  return result;
 80027dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d099      	beq.n	8002732 <HAL_RCC_OscConfig+0x8c6>
 80027fe:	e063      	b.n	80028c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe feaa 	bl	8001558 <HAL_GetTick>
 8002804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fea5 	bl	8001558 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e225      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 8002822:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002826:	2202      	movs	r2, #2
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800283e:	2202      	movs	r2, #2
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002850:	601a      	str	r2, [r3, #0]
  return result;
 8002852:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002856:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d102      	bne.n	8002872 <HAL_RCC_OscConfig+0xa06>
 800286c:	4b90      	ldr	r3, [pc, #576]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	e00d      	b.n	800288e <HAL_RCC_OscConfig+0xa22>
 8002872:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002892:	2102      	movs	r1, #2
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	fa92 f1a2 	rbit	r1, r2
 80028a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028a4:	6011      	str	r1, [r2, #0]
  return result;
 80028a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	fab2 f282 	clz	r2, r2
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	f002 021f 	and.w	r2, r2, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f202 	lsl.w	r2, r1, r2
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1a0      	bne.n	800280a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a76      	ldr	r2, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 81c2 	beq.w	8002c6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e8:	4b71      	ldr	r3, [pc, #452]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	f000 819c 	beq.w	8002c2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f040 8114 	bne.w	8002b2a <HAL_RCC_OscConfig+0xcbe>
 8002902:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002906:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800291a:	601a      	str	r2, [r3, #0]
  return result;
 800291c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002920:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800292c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	2300      	movs	r3, #0
 8002936:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fe0e 	bl	8001558 <HAL_GetTick>
 800293c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002940:	e009      	b.n	8002956 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe fe09 	bl	8001558 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e18b      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 8002956:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800295a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800296e:	601a      	str	r2, [r3, #0]
  return result;
 8002970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002974:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0xb24>
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0xb5c>
 8002990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029d0:	6011      	str	r1, [r2, #0]
 80029d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	fa92 f1a2 	rbit	r1, r2
 80029dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80029e0:	6011      	str	r1, [r2, #0]
  return result;
 80029e2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d19e      	bne.n	8002942 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
 8002a20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	fa93 f2a3 	rbit	r2, r3
 8002a34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a38:	601a      	str	r2, [r3, #0]
  return result;
 8002a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fd7f 	bl	8001558 <HAL_GetTick>
 8002a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5e:	e009      	b.n	8002a74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fd7a 	bl	8001558 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0fc      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 8002a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a8c:	601a      	str	r2, [r3, #0]
  return result;
 8002a8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xc48>
 8002aa8:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <HAL_RCC_OscConfig+0xc44>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e01e      	b.n	8002aec <HAL_RCC_OscConfig+0xc80>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0xe0c>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002af0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002af4:	6011      	str	r1, [r2, #0]
 8002af6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	fa92 f1a2 	rbit	r1, r2
 8002b00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b04:	6011      	str	r1, [r2, #0]
  return result;
 8002b06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d09b      	beq.n	8002a60 <HAL_RCC_OscConfig+0xbf4>
 8002b28:	e0a0      	b.n	8002c6c <HAL_RCC_OscConfig+0xe00>
 8002b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b42:	601a      	str	r2, [r3, #0]
  return result;
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fcfa 	bl	8001558 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fcf5 	bl	8001558 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e077      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
 8002b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xd4c>
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0xe0c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd84>
 8002bb8:	f107 0320 	add.w	r3, r7, #32
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f107 0318 	add.w	r3, r7, #24
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_RCC_OscConfig+0xe0c>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f107 0210 	add.w	r2, r7, #16
 8002bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bf8:	6011      	str	r1, [r2, #0]
 8002bfa:	f107 0210 	add.w	r2, r7, #16
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	fa92 f1a2 	rbit	r1, r2
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	6011      	str	r1, [r2, #0]
  return result;
 8002c0a:	f107 020c 	add.w	r2, r7, #12
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d19e      	bne.n	8002b6a <HAL_RCC_OscConfig+0xcfe>
 8002c2c:	e01e      	b.n	8002c6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCC_OscConfig+0xe0c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d108      	bne.n	8002c68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b09e      	sub	sp, #120	; 0x78
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e162      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b90      	ldr	r3, [pc, #576]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	498b      	ldr	r1, [pc, #556]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e14a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	497f      	ldr	r1, [pc, #508]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80dc 	beq.w	8002ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d13c      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xf6>
 8002cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xa6>
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	e00f      	b.n	8002d42 <HAL_RCC_ClockConfig+0xc6>
 8002d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
 8002d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d4a:	fa92 f2a2 	rbit	r2, r2
 8002d4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d17b      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0f3      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d13c      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x178>
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x128>
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e00f      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
 8002da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	4b46      	ldr	r3, [pc, #280]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 8002dd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d13a      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b2      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
 8002df4:	2302      	movs	r3, #2
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e00d      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1bc>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2202      	movs	r2, #2
 8002e3a:	61ba      	str	r2, [r7, #24]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	617a      	str	r2, [r7, #20]
  return result;
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e079      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	491a      	ldr	r1, [pc, #104]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fb6e 	bl	8001558 <HAL_GetTick>
 8002e7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fb6a 	bl	8001558 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e061      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d214      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_ClockConfig+0x25c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e040      	b.n	8002f5a <HAL_RCC_ClockConfig+0x2de>
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	491a      	ldr	r1, [pc, #104]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4912      	ldr	r1, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f1e:	f000 f829 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f22:	4601      	mov	r1, r0
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCC_ClockConfig+0x2e8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2c:	22f0      	movs	r2, #240	; 0xf0
 8002f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	60fa      	str	r2, [r7, #12]
  return result;
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	40d3      	lsrs	r3, r2
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x2ec>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	fa21 f303 	lsr.w	r3, r1, r3
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_RCC_ClockConfig+0x2f0>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_RCC_ClockConfig+0x2f4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fabc 	bl	80014d0 <HAL_InitTick>
  
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3778      	adds	r7, #120	; 0x78
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08003f64 	.word	0x08003f64
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x36>
 8002fa2:	e03c      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fa6:	623b      	str	r3, [r7, #32]
      break;
 8002fa8:	e03c      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	fa92 f2a2 	rbit	r2, r2
 8002fbc:	607a      	str	r2, [r7, #4]
  return result;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	40d3      	lsrs	r3, r2
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	fa92 f2a2 	rbit	r2, r2
 8002fe0:	60fa      	str	r2, [r7, #12]
  return result;
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	40d3      	lsrs	r3, r2
 8002fec:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e004      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	623b      	str	r3, [r7, #32]
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003020:	623b      	str	r3, [r7, #32]
      break;
 8003022:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003024:	6a3b      	ldr	r3, [r7, #32]
}
 8003026:	4618      	mov	r0, r3
 8003028:	372c      	adds	r7, #44	; 0x2c
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	007a1200 	.word	0x007a1200
 800303c:	08003f7c 	.word	0x08003f7c
 8003040:	08003f8c 	.word	0x08003f8c
 8003044:	003d0900 	.word	0x003d0900

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003066:	f7ff ffef 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003074:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	fa92 f2a2 	rbit	r2, r2
 8003080:	603a      	str	r2, [r7, #0]
  return result;
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	40d3      	lsrs	r3, r2
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	08003f74 	.word	0x08003f74

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030aa:	f7ff ffcd 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	603a      	str	r2, [r7, #0]
  return result;
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08003f74 	.word	0x08003f74

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b092      	sub	sp, #72	; 0x48
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d4 	beq.w	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10e      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	61d3      	str	r3, [r2, #28]
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a41      	ldr	r2, [pc, #260]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fa03 	bl	8001558 <HAL_GetTick>
 8003152:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe f9ff 	bl	8001558 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e14b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003174:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8084 	beq.w	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003190:	429a      	cmp	r2, r3
 8003192:	d07c      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031e6:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04b      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe f9af 	bl	8001558 <HAL_GetTick>
 80031fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe f9ab 	bl	8001558 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0f5      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	2302      	movs	r3, #2
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
  return result;
 800322c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d108      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003242:	4b01      	ldr	r3, [pc, #4]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	e00d      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	10908100 	.word	0x10908100
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2202      	movs	r2, #2
 8003266:	613a      	str	r2, [r7, #16]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	60fa      	str	r2, [r7, #12]
  return result;
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0b7      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800328e:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	495b      	ldr	r1, [pc, #364]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800329c:	4313      	orrs	r3, r2
 800329e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c0:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494e      	ldr	r1, [pc, #312]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f023 0210 	bic.w	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4947      	ldr	r1, [pc, #284]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	493f      	ldr	r1, [pc, #252]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f023 0220 	bic.w	r2, r3, #32
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4938      	ldr	r1, [pc, #224]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003328:	4313      	orrs	r3, r2
 800332a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4930      	ldr	r1, [pc, #192]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003346:	4313      	orrs	r3, r2
 8003348:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4929      	ldr	r1, [pc, #164]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4921      	ldr	r1, [pc, #132]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003382:	4313      	orrs	r3, r2
 8003384:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	491a      	ldr	r1, [pc, #104]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	490b      	ldr	r1, [pc, #44]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3748      	adds	r7, #72	; 0x48
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000

0800340c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e040      	b.n	80034a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fe10 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa4c 	bl	80038e8 <UART_SetConfig>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e022      	b.n	80034a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fb76 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fbfd 	bl	8003c98 <UART_CheckIdleState>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d113      	bne.n	8003500 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 81cc 	beq.w	800388e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
      }
      return;
 80034fe:	e1c6      	b.n	800388e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80e3 	beq.w	80036ce <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4ba5      	ldr	r3, [pc, #660]	; (80037ac <HAL_UART_IRQHandler+0x304>)
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80d8 	beq.w	80036ce <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_UART_IRQHandler+0xa2>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_UART_IRQHandler+0xce>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2202      	movs	r2, #2
 8003564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_UART_IRQHandler+0xfa>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2204      	movs	r2, #4
 8003590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	f043 0202 	orr.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00b      	beq.n	80035d8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ce:	f043 0208 	orr.w	r2, r3, #8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d011      	beq.n	8003606 <HAL_UART_IRQHandler+0x15e>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8140 	beq.w	8003892 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d004      	beq.n	8003656 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d031      	beq.n	80036ba <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fbe3 	bl	8003e22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d123      	bne.n	80036b2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a4a      	ldr	r2, [pc, #296]	; (80037b0 <HAL_UART_IRQHandler+0x308>)
 8003688:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fa23 	bl	8001ada <HAL_DMA_Abort_IT>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d017      	beq.n	80036ca <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80036a4:	4610      	mov	r0, r2
 80036a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e00f      	b.n	80036ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f906 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e00b      	b.n	80036ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f902 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e007      	b.n	80036ca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8fe 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80036c8:	e0e3      	b.n	8003892 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ca:	bf00      	nop
    return;
 80036cc:	e0e1      	b.n	8003892 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80a7 	bne.w	8003826 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a1 	beq.w	8003826 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 809b 	beq.w	8003826 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2210      	movs	r2, #16
 80036f6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d156      	bne.n	80037b4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80bf 	beq.w	8003896 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800371e:	893a      	ldrh	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	f080 80b8 	bcs.w	8003896 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	893a      	ldrh	r2, [r7, #8]
 800372a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b20      	cmp	r3, #32
 8003736:	d02a      	beq.n	800378e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003746:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003766:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe f96d 	bl	8001a68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800379a:	b29b      	uxth	r3, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f894 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037a8:	e075      	b.n	8003896 <HAL_UART_IRQHandler+0x3ee>
 80037aa:	bf00      	nop
 80037ac:	04000120 	.word	0x04000120
 80037b0:	08003e81 	.word	0x08003e81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d063      	beq.n	800389a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d060      	beq.n	800389a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037e6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0210 	bic.w	r2, r2, #16
 8003818:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f856 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003824:	e039      	b.n	800389a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <HAL_UART_IRQHandler+0x3a4>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fb4a 	bl	8003ede <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800384a:	e029      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01a      	beq.n	800389e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    }
    return;
 8003870:	e015      	b.n	800389e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb10 	bl	8003eac <UART_EndTransmit_IT>
    return;
 800388c:	e008      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
      return;
 800388e:	bf00      	nop
 8003890:	e006      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
      return;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_UART_IRQHandler+0x3f8>
    return;
 800389e:	bf00      	nop
  }

}
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop

080038a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b8a      	ldr	r3, [pc, #552]	; (8003b3c <UART_SetConfig+0x254>)
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a78      	ldr	r2, [pc, #480]	; (8003b40 <UART_SetConfig+0x258>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d120      	bne.n	80039a6 <UART_SetConfig+0xbe>
 8003964:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <UART_SetConfig+0x25c>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d817      	bhi.n	80039a0 <UART_SetConfig+0xb8>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x90>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	08003989 	.word	0x08003989
 800397c:	08003995 	.word	0x08003995
 8003980:	0800399b 	.word	0x0800399b
 8003984:	0800398f 	.word	0x0800398f
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e01d      	b.n	80039ca <UART_SetConfig+0xe2>
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e01a      	b.n	80039ca <UART_SetConfig+0xe2>
 8003994:	2304      	movs	r3, #4
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e017      	b.n	80039ca <UART_SetConfig+0xe2>
 800399a:	2308      	movs	r3, #8
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e014      	b.n	80039ca <UART_SetConfig+0xe2>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e011      	b.n	80039ca <UART_SetConfig+0xe2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a67      	ldr	r2, [pc, #412]	; (8003b48 <UART_SetConfig+0x260>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d102      	bne.n	80039b6 <UART_SetConfig+0xce>
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e009      	b.n	80039ca <UART_SetConfig+0xe2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a64      	ldr	r2, [pc, #400]	; (8003b4c <UART_SetConfig+0x264>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d102      	bne.n	80039c6 <UART_SetConfig+0xde>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e001      	b.n	80039ca <UART_SetConfig+0xe2>
 80039c6:	2310      	movs	r3, #16
 80039c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d15b      	bne.n	8003a8c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d827      	bhi.n	8003a2a <UART_SetConfig+0x142>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0xf8>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7ff fb2c 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61b8      	str	r0, [r7, #24]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff fb4a 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <UART_SetConfig+0x268>)
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7ff faab 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8003a1e:	61b8      	str	r0, [r7, #24]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	61bb      	str	r3, [r7, #24]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77bb      	strb	r3, [r7, #30]
        break;
 8003a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d074      	beq.n	8003b24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d916      	bls.n	8003a86 <UART_SetConfig+0x19e>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d212      	bcs.n	8003a86 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	89fa      	ldrh	r2, [r7, #14]
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	e04e      	b.n	8003b24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	77bb      	strb	r3, [r7, #30]
 8003a8a:	e04b      	b.n	8003b24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d827      	bhi.n	8003ae2 <UART_SetConfig+0x1fa>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x1b0>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7ff fad0 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7ff faee 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <UART_SetConfig+0x268>)
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7ff fa4f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8003ad6:	61b8      	str	r0, [r7, #24]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aea:	bf00      	nop
    }

    if (pclk != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085a      	lsrs	r2, r3, #1
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d908      	bls.n	8003b20 <UART_SetConfig+0x238>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d204      	bcs.n	8003b20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e001      	b.n	8003b24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	efff69f3 	.word	0xefff69f3
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	40004800 	.word	0x40004800
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d10a      	bne.n	8003c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca8:	f7fd fc56 	bl	8001558 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10e      	bne.n	8003cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f82d 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e023      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10e      	bne.n	8003d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f817 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00d      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	e05e      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d05a      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fd fc08 	bl	8001558 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11b      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e043      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02c      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d124      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d091      	beq.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e38:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0210 	bic.w	r2, r2, #16
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fd0c 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fce9 	bl	80038a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 f820 	bl	8003f4c <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003f9c 	.word	0x08003f9c
 8003f30:	08003f9c 	.word	0x08003f9c
 8003f34:	08003f9c 	.word	0x08003f9c
 8003f38:	08003fa0 	.word	0x08003fa0

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
