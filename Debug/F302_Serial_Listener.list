
F302_Serial_Listener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e00  08004e00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e00  08004e00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000000c  08004e14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004e14  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001270f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcc  00000000  00000000  0003274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd5a  00000000  00000000  00036e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011817  00000000  00000000  00054b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7463  00000000  00000000  00066391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  0010d848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004db0 	.word	0x08004db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004db0 	.word	0x08004db0

080001c8 <Battery_Check>:
#include "Battery_Task.h"
#include "UART_Task.h"

// Battery check
void Battery_Check( void )
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	uint32_t temp;

	// Check ADC ready flag bit.
	temp = ADC1->CR;
 80001ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	607b      	str	r3, [r7, #4]
	temp &= 0x00000004;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f003 0304 	and.w	r3, r3, #4
 80001dc:	607b      	str	r3, [r7, #4]
	if( temp )
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d125      	bne.n	8000230 <Battery_Check+0x68>
		// Still busy.
		return;
	}

	// Keep ADC converted value.
	battery_adc_value = ADC1->DR;
 80001e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80001e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001ea:	4a14      	ldr	r2, [pc, #80]	; (800023c <Battery_Check+0x74>)
 80001ec:	6013      	str	r3, [r2, #0]

	battery_adc_value *= 33;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <Battery_Check+0x74>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4613      	mov	r3, r2
 80001f4:	015b      	lsls	r3, r3, #5
 80001f6:	4413      	add	r3, r2
 80001f8:	4a10      	ldr	r2, [pc, #64]	; (800023c <Battery_Check+0x74>)
 80001fa:	6013      	str	r3, [r2, #0]
	battery_adc_value *= 145;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <Battery_Check+0x74>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4613      	mov	r3, r2
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	4413      	add	r3, r2
 8000206:	011b      	lsls	r3, r3, #4
 8000208:	4413      	add	r3, r2
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <Battery_Check+0x74>)
 800020c:	6013      	str	r3, [r2, #0]
	battery_adc_value >>= 12;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <Battery_Check+0x74>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	0b1b      	lsrs	r3, r3, #12
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <Battery_Check+0x74>)
 8000216:	6013      	str	r3, [r2, #0]

	// Start new convert.
	ADC1->CR |= 0x00000004;
 8000218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6093      	str	r3, [r2, #8]

	// Set data update flag.
	battery_flag_upout = 1;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <Battery_Check+0x78>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	e000      	b.n	8000232 <Battery_Check+0x6a>
		return;
 8000230:	bf00      	nop
}
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	20000060 	.word	0x20000060
 8000240:	20000079 	.word	0x20000079

08000244 <Battery_Update_Output>:

// Battery update output.
void Battery_Update_Output( void )
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	uint32_t temp1;

	// UART #2 busy check.
	if( uart2_tx_cnt )
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <Battery_Update_Output+0x140>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	f040 808a 	bne.w	800036a <Battery_Update_Output+0x126>
		// Still busy.
		return;
	}

	// Check flag.
	if( battery_flag_enable == 0x00 )
 8000256:	4b4c      	ldr	r3, [pc, #304]	; (8000388 <Battery_Update_Output+0x144>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	f000 8086 	beq.w	800036e <Battery_Update_Output+0x12a>
		// Update task not enable.
		return;
	}

	// Check delay count.
	if( uart2_update_output_delay < 150 )
 8000262:	4b4a      	ldr	r3, [pc, #296]	; (800038c <Battery_Update_Output+0x148>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b95      	cmp	r3, #149	; 0x95
 8000268:	f240 8083 	bls.w	8000372 <Battery_Update_Output+0x12e>
	{
		return;
	}
	// Reset delay count.
	uart2_update_output_delay = 0;
 800026c:	4b47      	ldr	r3, [pc, #284]	; (800038c <Battery_Update_Output+0x148>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]

	if( battery_flag_upout == 0 )
 8000272:	4b47      	ldr	r3, [pc, #284]	; (8000390 <Battery_Update_Output+0x14c>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d07c      	beq.n	8000376 <Battery_Update_Output+0x132>
	{
		return;
	}
	// Clear flag.
	battery_flag_upout = 0;
 800027c:	4b44      	ldr	r3, [pc, #272]	; (8000390 <Battery_Update_Output+0x14c>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]


	temp1 = battery_adc_value;
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <Battery_Update_Output+0x150>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	607b      	str	r3, [r7, #4]
	temp1 /= 1000;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a43      	ldr	r2, [pc, #268]	; (8000398 <Battery_Update_Output+0x154>)
 800028c:	fba2 2303 	umull	r2, r3, r2, r3
 8000290:	099b      	lsrs	r3, r3, #6
 8000292:	607b      	str	r3, [r7, #4]
	uart2_tx_data[0] = (uint8_t)temp1;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b40      	ldr	r3, [pc, #256]	; (800039c <Battery_Update_Output+0x158>)
 800029a:	701a      	strb	r2, [r3, #0]
	uart2_tx_data[0] += 0x30; // to character.
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <Battery_Update_Output+0x158>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	3330      	adds	r3, #48	; 0x30
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b3d      	ldr	r3, [pc, #244]	; (800039c <Battery_Update_Output+0x158>)
 80002a8:	701a      	strb	r2, [r3, #0]
	battery_adc_value %= 1000;
 80002aa:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <Battery_Update_Output+0x150>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <Battery_Update_Output+0x154>)
 80002b0:	fba3 1302 	umull	r1, r3, r3, r2
 80002b4:	099b      	lsrs	r3, r3, #6
 80002b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002ba:	fb01 f303 	mul.w	r3, r1, r3
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	4a34      	ldr	r2, [pc, #208]	; (8000394 <Battery_Update_Output+0x150>)
 80002c2:	6013      	str	r3, [r2, #0]

	temp1 = battery_adc_value;
 80002c4:	4b33      	ldr	r3, [pc, #204]	; (8000394 <Battery_Update_Output+0x150>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	607b      	str	r3, [r7, #4]
	temp1 /= 100;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a34      	ldr	r2, [pc, #208]	; (80003a0 <Battery_Update_Output+0x15c>)
 80002ce:	fba2 2303 	umull	r2, r3, r2, r3
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	607b      	str	r3, [r7, #4]
	uart2_tx_data[1] = (uint8_t)temp1;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b30      	ldr	r3, [pc, #192]	; (800039c <Battery_Update_Output+0x158>)
 80002dc:	705a      	strb	r2, [r3, #1]
	uart2_tx_data[1] += 0x30; // to character.
 80002de:	4b2f      	ldr	r3, [pc, #188]	; (800039c <Battery_Update_Output+0x158>)
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	3330      	adds	r3, #48	; 0x30
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b2c      	ldr	r3, [pc, #176]	; (800039c <Battery_Update_Output+0x158>)
 80002ea:	705a      	strb	r2, [r3, #1]
	battery_adc_value %= 100;
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <Battery_Update_Output+0x150>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <Battery_Update_Output+0x15c>)
 80002f2:	fba3 1302 	umull	r1, r3, r3, r2
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	2164      	movs	r1, #100	; 0x64
 80002fa:	fb01 f303 	mul.w	r3, r1, r3
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	4a24      	ldr	r2, [pc, #144]	; (8000394 <Battery_Update_Output+0x150>)
 8000302:	6013      	str	r3, [r2, #0]

	uart2_tx_data[2] = 0x2e; // '.'
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <Battery_Update_Output+0x158>)
 8000306:	222e      	movs	r2, #46	; 0x2e
 8000308:	709a      	strb	r2, [r3, #2]

	temp1 = battery_adc_value;
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <Battery_Update_Output+0x150>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	607b      	str	r3, [r7, #4]
	temp1 /= 100;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a23      	ldr	r2, [pc, #140]	; (80003a0 <Battery_Update_Output+0x15c>)
 8000314:	fba2 2303 	umull	r2, r3, r2, r3
 8000318:	095b      	lsrs	r3, r3, #5
 800031a:	607b      	str	r3, [r7, #4]
	uart2_tx_data[3] = (uint8_t)temp1;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <Battery_Update_Output+0x158>)
 8000322:	70da      	strb	r2, [r3, #3]
	uart2_tx_data[3] += 0x30; // to character.
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <Battery_Update_Output+0x158>)
 8000326:	78db      	ldrb	r3, [r3, #3]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	3330      	adds	r3, #48	; 0x30
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <Battery_Update_Output+0x158>)
 8000330:	70da      	strb	r2, [r3, #3]
	battery_adc_value %= 100;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <Battery_Update_Output+0x150>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <Battery_Update_Output+0x15c>)
 8000338:	fba3 1302 	umull	r1, r3, r3, r2
 800033c:	095b      	lsrs	r3, r3, #5
 800033e:	2164      	movs	r1, #100	; 0x64
 8000340:	fb01 f303 	mul.w	r3, r1, r3
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <Battery_Update_Output+0x150>)
 8000348:	6013      	str	r3, [r2, #0]

	uart2_tx_data[4] = 0x56; // 'V'
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <Battery_Update_Output+0x158>)
 800034c:	2256      	movs	r2, #86	; 0x56
 800034e:	711a      	strb	r2, [r3, #4]

	uart2_tx_data[5] = 0x0d;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <Battery_Update_Output+0x158>)
 8000352:	220d      	movs	r2, #13
 8000354:	715a      	strb	r2, [r3, #5]
	uart2_tx_data[6] = 0x0a;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <Battery_Update_Output+0x158>)
 8000358:	220a      	movs	r2, #10
 800035a:	719a      	strb	r2, [r3, #6]

	// Prepare UART data output.
	uart2_tx_cnt = 7;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <Battery_Update_Output+0x140>)
 800035e:	2207      	movs	r2, #7
 8000360:	701a      	strb	r2, [r3, #0]
	ptr_uart2_tx_data = uart2_tx_data;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <Battery_Update_Output+0x160>)
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <Battery_Update_Output+0x158>)
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e006      	b.n	8000378 <Battery_Update_Output+0x134>
		return;
 800036a:	bf00      	nop
 800036c:	e004      	b.n	8000378 <Battery_Update_Output+0x134>
		return;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <Battery_Update_Output+0x134>
		return;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <Battery_Update_Output+0x134>
		return;
 8000376:	bf00      	nop
}
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000064 	.word	0x20000064
 8000388:	2000005d 	.word	0x2000005d
 800038c:	20000058 	.word	0x20000058
 8000390:	20000079 	.word	0x20000079
 8000394:	20000060 	.word	0x20000060
 8000398:	10624dd3 	.word	0x10624dd3
 800039c:	20000090 	.word	0x20000090
 80003a0:	51eb851f 	.word	0x51eb851f
 80003a4:	20000040 	.word	0x20000040

080003a8 <Buzzer_On>:
#include "Buzzer_Task.h"


// Buzzer turn on.
void Buzzer_On( void )
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	// PC2 as alternate function mode, bit # 5~ #4, 0x2 .
	GPIOC->MODER &= 0xffffffcf;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <Buzzer_On+0x28>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <Buzzer_On+0x28>)
 80003b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003b6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00000020;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <Buzzer_On+0x28>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <Buzzer_On+0x28>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	48000800 	.word	0x48000800

080003d4 <Buzzer_Off>:

// Buzzer turn off.
void Buzzer_Off( void )
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	// PC2 ( bit #5 ~ #4 ) as input port mode.
	GPIOC->MODER &= 0xffffffcf;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <Buzzer_Off+0x1c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <Buzzer_Off+0x1c>)
 80003de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	48000800 	.word	0x48000800

080003f4 <Buzzer_Init>:

// Initialize.
void Buzzer_Init( void )
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	// APB2 ( 64MHz ).
	// Timer #1 peripheral clock enable ( bit #11 ).
	RCC->APB2ENR |= 0x00000800;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <Buzzer_Init+0x78>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <Buzzer_Init+0x78>)
 80003fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000402:	6193      	str	r3, [r2, #24]

	TIM1->CR1 = 0x0000;
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <Buzzer_Init+0x7c>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	// 64MHz = 0.015625us, 15.625ns for DTI .
	// Prescaler value 1.
	TIM1->PSC = 0;
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <Buzzer_Init+0x7c>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
	// Period.
	// 100KHz = 10us.
	// 250us / 0.015625us = 16000.
	TIM1->ARR = 16000;
 8000410:	4b17      	ldr	r3, [pc, #92]	; (8000470 <Buzzer_Init+0x7c>)
 8000412:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c

	// CH #3, PWM duty 50% ( Test ).
	TIM1->CCR3 = 8000;
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <Buzzer_Init+0x7c>)
 800041a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800041e:	63da      	str	r2, [r3, #60]	; 0x3c

	// CH #3, configure PWM mode 1.
	TIM1->CCMR2 = 0x00000060;
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <Buzzer_Init+0x7c>)
 8000422:	2260      	movs	r2, #96	; 0x60
 8000424:	61da      	str	r2, [r3, #28]

	// OIS3 = 0, when MOE = 0, ( CH3 and CH3N output state idle ), CH3 output 0,  ( bit #12 ).
	// OIS3N = 1, when MOE = 0, ( CH3 and CH3N output state idle ), CH3N output 1,  ( bit #13 ).
	TIM1->CR2 = 0x00002000;
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <Buzzer_Init+0x7c>)
 8000428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800042c:	605a      	str	r2, [r3, #4]

	// OSSR = 1, When MOE = 0, CH1 / CH1N still output H or L logic, not high Z.  ( it #11 ).
	// AOE = 0, MOE could set/clear by software ( bit #14 ).
	// MOE = 1, Main output ( CH1 and CH1N ) enable, not idle, ( bit #15 ).
	// bit[ 7~0 ] = 8, 8*15.625ns = 125ns dead time.
	TIM1->BDTR = 0x8808;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <Buzzer_Init+0x7c>)
 8000430:	f648 0208 	movw	r2, #34824	; 0x8808
 8000434:	645a      	str	r2, [r3, #68]	; 0x44
	// OC #3:
	// Negative output ( TIM1_CH3N ) active low ( bit #11, 0 ).
	// Negative output ( TIM1_CH3N ) enable ( bit #10, 1 ).
	// Positive output ( TIM1_CH3 ) active high ( bit #9, 0 ).
	// Positive output ( TIM1_CH3 ) enable ( bit #8, 1 ).
	TIM1->CCER = 0x0500;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <Buzzer_Init+0x7c>)
 8000438:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800043c:	621a      	str	r2, [r3, #32]
	// Enable.
	TIM1->CR1 |= 0x0001;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <Buzzer_Init+0x7c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <Buzzer_Init+0x7c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]

	// PC2, alternate function 2, bit #11 ~ #8, 0x02.
	GPIOC->AFR[0] &= 0xfffff0ff;
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <Buzzer_Init+0x80>)
 800044c:	6a1b      	ldr	r3, [r3, #32]
 800044e:	4a09      	ldr	r2, [pc, #36]	; (8000474 <Buzzer_Init+0x80>)
 8000450:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000454:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= 0x00000200;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <Buzzer_Init+0x80>)
 8000458:	6a1b      	ldr	r3, [r3, #32]
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <Buzzer_Init+0x80>)
 800045c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000460:	6213      	str	r3, [r2, #32]

}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40012c00 	.word	0x40012c00
 8000474:	48000800 	.word	0x48000800

08000478 <Char_to_Int>:

#include "Char_Convert.h"

// Character to integer.
uint8_t Char_to_Int( uint8_t char_in )
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_value;

	ret_value = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]

	// '0' ~ '9'.
	if( char_in > 0x2f && char_in < 0x3a )
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b2f      	cmp	r3, #47	; 0x2f
 800048a:	d908      	bls.n	800049e <Char_to_Int+0x26>
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2b39      	cmp	r3, #57	; 0x39
 8000490:	d805      	bhi.n	800049e <Char_to_Int+0x26>
	{
		ret_value = char_in;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x30;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	3b30      	subs	r3, #48	; 0x30
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e01c      	b.n	80004d8 <Char_to_Int+0x60>
	}
	// 'A' ~ 'F'
	else if( char_in > 0x40 && char_in < 0x47 )
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b40      	cmp	r3, #64	; 0x40
 80004a2:	d90b      	bls.n	80004bc <Char_to_Int+0x44>
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b46      	cmp	r3, #70	; 0x46
 80004a8:	d808      	bhi.n	80004bc <Char_to_Int+0x44>
	{
		ret_value = char_in;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x41;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	3b41      	subs	r3, #65	; 0x41
 80004b2:	73fb      	strb	r3, [r7, #15]
		ret_value += 10;
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	330a      	adds	r3, #10
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e00d      	b.n	80004d8 <Char_to_Int+0x60>
	}
	// 'a' ~ 'f'
	else if( char_in > 0x60 && char_in < 0x67 )
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2b60      	cmp	r3, #96	; 0x60
 80004c0:	d90a      	bls.n	80004d8 <Char_to_Int+0x60>
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b66      	cmp	r3, #102	; 0x66
 80004c6:	d807      	bhi.n	80004d8 <Char_to_Int+0x60>
	{
		ret_value = char_in;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	73fb      	strb	r3, [r7, #15]
		ret_value -= 0x61;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	3b61      	subs	r3, #97	; 0x61
 80004d0:	73fb      	strb	r3, [r7, #15]
		ret_value += 10;
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	330a      	adds	r3, #10
 80004d6:	73fb      	strb	r3, [r7, #15]
	}

	return ret_value;
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <GPIO_UART1_485_RE>:
	GPIOB->BSRR = 0x00000002;
}

// UART #1 RS485 flow RX on,
void GPIO_UART1_485_RE( void )
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	// PB1 output low.
	GPIOB->BSRR = 0x00020000;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <GPIO_UART1_485_RE+0x18>)
 80004ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004f2:	619a      	str	r2, [r3, #24]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	48000400 	.word	0x48000400

08000504 <GPIO_UART3_485_RE>:
	GPIOB->BSRR = 0x00000004;
}

// UART #3 RS485 flow RX on,
void GPIO_UART3_485_RE( void )
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	// PB2 output low.
	GPIOB->BSRR = 0x00040000;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <GPIO_UART3_485_RE+0x18>)
 800050a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800050e:	619a      	str	r2, [r3, #24]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400

08000520 <GPIO_LED1_Off>:
	// PC10 output high.
	GPIOC->BSRR = 0x00000400;
}
// User LED #1 turn off.
void GPIO_LED1_Off( void )
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	// PC10 output low.
	GPIOC->BSRR = 0x04000000;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <GPIO_LED1_Off+0x18>)
 8000526:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800052a:	619a      	str	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	48000800 	.word	0x48000800

0800053c <GPIO_LED2_Off>:
	// PC11 output high.
	GPIOC->BSRR = 0x00000800;
}
// User LED #2 turn off.
void GPIO_LED2_Off( void )
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	// PC11 output low.
	GPIOC->BSRR = 0x08000000;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <GPIO_LED2_Off+0x18>)
 8000542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000546:	619a      	str	r2, [r3, #24]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	48000800 	.word	0x48000800

08000558 <GPIO_LED3_Off>:
	// PC12 output high.
	GPIOC->BSRR = 0x00001000;
}
// User LED #3 turn off.
void GPIO_LED3_Off( void )
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	// PC12 output low.
	GPIOC->BSRR = 0x10000000;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <GPIO_LED3_Off+0x18>)
 800055e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000562:	619a      	str	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	48000800 	.word	0x48000800

08000574 <GPIO_LED4_Off>:
	// PD2 output high.
	GPIOD->BSRR = 0x00000004;
}
// User LED #4 turn off.
void GPIO_LED4_Off( void )
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	// PD2 output low.
	GPIOD->BSRR = 0x00040000;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <GPIO_LED4_Off+0x18>)
 800057a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800057e:	619a      	str	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	48000c00 	.word	0x48000c00

08000590 <GPIO_LED_CAN_Inactive>:
	// Set delay count ( 20 * 10ms ).
	gpio_led_can_dly = 20;
}
// CAN bus inactive LED off.
void GPIO_LED_CAN_Inactive( void )
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	// PC15 output low.
	GPIOC->BSRR = 0x80000000;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <GPIO_LED_CAN_Inactive+0x18>)
 8000596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800059a:	619a      	str	r2, [r3, #24]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	48000800 	.word	0x48000800

080005ac <GPIO_LED_UART1_Inactive>:
	gpio_led_uart1_dly = 20;
}

// UART #1 inactive LED off.
void GPIO_LED_UART1_Inactive( void )
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	// PC14 output low.
	GPIOC->BSRR = 0x40000000;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <GPIO_LED_UART1_Inactive+0x18>)
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b6:	619a      	str	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	48000800 	.word	0x48000800

080005c8 <GPIO_LED_UART3_Inactive>:
	// Set delay count ( 20 * 10ms ).
	gpio_led_uart3_dly = 20;
}
// UART #3 inactive LED off.
void GPIO_LED_UART3_Inactive( void )
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	// PC13 output low.
	GPIOC->BSRR = 0x20000000;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <GPIO_LED_UART3_Inactive+0x18>)
 80005ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005d2:	619a      	str	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	48000800 	.word	0x48000800

080005e4 <GPIO_Btn_Task>:


// Button input task.
void GPIO_Btn_Task( void )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

	uint32_t temp;
	uint32_t current_btn_input;

	// Button debounce count check.
	if( gpio_btn_dbc < 2 )
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <GPIO_Btn_Task+0xb8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d94d      	bls.n	800068e <GPIO_Btn_Task+0xaa>
	{
		// Not done.
		return;
	}
	// Clear count.
	gpio_btn_dbc = 0;
 80005f2:	4b2a      	ldr	r3, [pc, #168]	; (800069c <GPIO_Btn_Task+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]

	// Read button input from IO port.
	temp = GPIOC->IDR;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <GPIO_Btn_Task+0xbc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	607b      	str	r3, [r7, #4]
	temp &= 0x00000360;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8000604:	607b      	str	r3, [r7, #4]

	// Combine with previous input.
	current_btn_input = gpio_btn_pre;
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <GPIO_Btn_Task+0xc0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	603b      	str	r3, [r7, #0]
	current_btn_input |= temp;
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	603b      	str	r3, [r7, #0]

	// Keep as previous.
	gpio_btn_pre = temp;
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <GPIO_Btn_Task+0xc0>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]

	// Button #1 check.
	if( current_btn_input == 0x0340 )
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000620:	d131      	bne.n	8000686 <GPIO_Btn_Task+0xa2>
	{
		// Button hold check.
		temp = gpio_btn_flag;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <GPIO_Btn_Task+0xc4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	607b      	str	r3, [r7, #4]
		temp &= 0x0020;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	607b      	str	r3, [r7, #4]
		if( temp == 0x0020  )
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b20      	cmp	r3, #32
 8000634:	d02d      	beq.n	8000692 <GPIO_Btn_Task+0xae>
			// Still hold.
			return;
		}
		// Not hold.
		// Set flag bit.
		gpio_btn_flag |= 0x0020;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <GPIO_Btn_Task+0xc4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <GPIO_Btn_Task+0xc4>)
 8000640:	6013      	str	r3, [r2, #0]

		// UART #1 test.
		uart1_tx_data[ 0 ] = 0x41;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <GPIO_Btn_Task+0xc8>)
 8000644:	2241      	movs	r2, #65	; 0x41
 8000646:	701a      	strb	r2, [r3, #0]
		uart1_tx_cnt = 1;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <GPIO_Btn_Task+0xcc>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
		uart1_flag |= 0x01;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <GPIO_Btn_Task+0xd0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <GPIO_Btn_Task+0xd0>)
 800065c:	701a      	strb	r2, [r3, #0]

		// UART #3 test.
		uart3_tx_data[ 0 ] = 0x41;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <GPIO_Btn_Task+0xd4>)
 8000660:	2241      	movs	r2, #65	; 0x41
 8000662:	701a      	strb	r2, [r3, #0]
		uart3_tx_cnt = 1;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <GPIO_Btn_Task+0xd8>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		uart3_flag |= 0x01;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <GPIO_Btn_Task+0xdc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <GPIO_Btn_Task+0xdc>)
 8000678:	701a      	strb	r2, [r3, #0]

		// Buzzer test.
		Buzzer_On();
 800067a:	f7ff fe95 	bl	80003a8 <Buzzer_On>
		// Keep going 50 * 10ms.
		bz_dly = 20;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <GPIO_Btn_Task+0xe0>)
 8000680:	2214      	movs	r2, #20
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e006      	b.n	8000694 <GPIO_Btn_Task+0xb0>
	}
	else
	{
		// Button release or no press;
		// Release button status.
		gpio_btn_flag = 0x0000;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <GPIO_Btn_Task+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e002      	b.n	8000694 <GPIO_Btn_Task+0xb0>
		return;
 800068e:	bf00      	nop
 8000690:	e000      	b.n	8000694 <GPIO_Btn_Task+0xb0>
			return;
 8000692:	bf00      	nop
	}

}
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000c0 	.word	0x200000c0
 80006a0:	48000800 	.word	0x48000800
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	200000c8 	.word	0x200000c8
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	200000b7 	.word	0x200000b7
 80006b4:	200000b6 	.word	0x200000b6
 80006b8:	20000068 	.word	0x20000068
 80006bc:	20000055 	.word	0x20000055
 80006c0:	2000005e 	.word	0x2000005e
 80006c4:	200000b8 	.word	0x200000b8

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <Speed_Init>:
#include "Speed_Task.h"
#include "UART_Task.h"

// Speed task initialize.
void Speed_Init( void )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	// APB2 ( 64MHz ).
	// Timer #2 peripheral clock enable ( bit #1 = 1 ).
	RCC->APB1ENR |= 0x00000001;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <Speed_Init+0x78>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <Speed_Init+0x78>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	61d3      	str	r3, [r2, #28]

	// Prescaler value 1.
	TIM2->PSC = 63;
 8000714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000718:	223f      	movs	r2, #63	; 0x3f
 800071a:	629a      	str	r2, [r3, #40]	; 0x28

	// CC1S = 0x1, ( bit #1 ~ 0, 0x1 )
	// CC2S = 0x2, ( bit #9 ~ 8, 0x2 )
	TIM2->CCMR1 |= 0x00000201;
 800071c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6193      	str	r3, [r2, #24]

	// CC2NP = 0, ( bit #7, 0 ).
	// CC2P = 1, ( bit #5, 1 ).
	// CC1NP = 1, ( bit #3, 1 ).
	// CC1P = 0, ( bit #1, 0 ).
	TIM2->CCER = 0x00000028;
 8000730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000734:	2228      	movs	r2, #40	; 0x28
 8000736:	621a      	str	r2, [r3, #32]

	// TS = 0x5, ( bit #6 ~ 4, 0x5 )
	// SMS = 0x4, ( bit #16, #2~0, 0x4 )
	TIM2->SMCR = 0x00000054;
 8000738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800073c:	2254      	movs	r2, #84	; 0x54
 800073e:	609a      	str	r2, [r3, #8]

	// CC2E = 1 ( bit #4 ).
	// CC1E = 1 ( bit #0 ).
	TIM2->CCER |= 0x00000011;
 8000740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	f043 0311 	orr.w	r3, r3, #17
 800074e:	6213      	str	r3, [r2, #32]

	// Enable CC1 interrupt.
	TIM2->DIER |= 0x02;
 8000750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	60d3      	str	r3, [r2, #12]
	// Enable IRQ.
	NVIC_EnableIRQ( TIM2_IRQn );
 8000760:	201c      	movs	r0, #28
 8000762:	f7ff ffb1 	bl	80006c8 <__NVIC_EnableIRQ>
	// Enable timer #2 ( bit #0, 1 ).
	TIM2->CR1 |= 0x0001;
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <Speed_Calculate>:

// Speed calculate.
void Speed_Calculate( void )
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint32_t temp2;
	uint32_t temp3;

	// Check sampling count.
	if( speed_sample_cnt < SPEED_SAMPLE_CNT )
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <Speed_Calculate+0xf4>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b04      	cmp	r3, #4
 800078e:	d96b      	bls.n	8000868 <Speed_Calculate+0xe8>

	// Do not use array #0 data, some times it did not sampling from
	// wheel full a round.

	// For get smallest value from data array.
	temp3 = speed_pulse_period[4];
 8000790:	4b39      	ldr	r3, [pc, #228]	; (8000878 <Speed_Calculate+0xf8>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	603b      	str	r3, [r7, #0]
	// Get average offset.
	temp2 = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
	// Set count value.
	cnt = 3;
 800079a:	2303      	movs	r3, #3
 800079c:	73fb      	strb	r3, [r7, #15]
	while( cnt )
 800079e:	e02e      	b.n	80007fe <Speed_Calculate+0x7e>
	{
		// Get average delta.
		temp1 = speed_pulse_period[4];
 80007a0:	4b35      	ldr	r3, [pc, #212]	; (8000878 <Speed_Calculate+0xf8>)
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	60bb      	str	r3, [r7, #8]
		if( temp1 >= speed_pulse_period[cnt] )
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a33      	ldr	r2, [pc, #204]	; (8000878 <Speed_Calculate+0xf8>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d307      	bcc.n	80007c4 <Speed_Calculate+0x44>
		{
			temp1 -= speed_pulse_period[cnt];
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	4a30      	ldr	r2, [pc, #192]	; (8000878 <Speed_Calculate+0xf8>)
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	e009      	b.n	80007d8 <Speed_Calculate+0x58>
		}
		else
		{
			temp1 = speed_pulse_period[cnt];
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <Speed_Calculate+0xf8>)
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	60bb      	str	r3, [r7, #8]
			temp1 -= speed_pulse_period[4];
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <Speed_Calculate+0xf8>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	60bb      	str	r3, [r7, #8]
		}
		temp2 += temp1;
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	607b      	str	r3, [r7, #4]

		// Get smaller value from array.
		if( temp3 < speed_pulse_period[cnt] )
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <Speed_Calculate+0xf8>)
 80007e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d204      	bcs.n	80007f8 <Speed_Calculate+0x78>
		{
			temp3 = speed_pulse_period[cnt];
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <Speed_Calculate+0xf8>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	603b      	str	r3, [r7, #0]
		}

		// Decrease count.
		--cnt;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
	while( cnt )
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1cd      	bne.n	80007a0 <Speed_Calculate+0x20>
	}
	// Adjust average offset.
	temp2 >>= 2;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	607b      	str	r3, [r7, #4]
	// Speed pulse count.
	temp3 += temp2;
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	603b      	str	r3, [r7, #0]

	// Get current speed.
	if( temp3 > SPEED_1KMH_PULSE_COUNT )
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <Speed_Calculate+0xfc>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d903      	bls.n	8000822 <Speed_Calculate+0xa2>
	{
		speed_current_value = 0;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <Speed_Calculate+0x100>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e01b      	b.n	800085a <Speed_Calculate+0xda>
	}
	else
	{
		speed_current_value = SPEED_1KMH_PULSE_COUNT;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <Speed_Calculate+0x100>)
 8000824:	4a15      	ldr	r2, [pc, #84]	; (800087c <Speed_Calculate+0xfc>)
 8000826:	601a      	str	r2, [r3, #0]
		speed_current_value *= 10; // for get 10^-1 digit.
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <Speed_Calculate+0x100>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	461a      	mov	r2, r3
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <Speed_Calculate+0x100>)
 8000838:	601a      	str	r2, [r3, #0]
		speed_current_value /= temp3;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <Speed_Calculate+0x100>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	fbb2 f3f3 	udiv	r3, r2, r3
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <Speed_Calculate+0x100>)
 8000846:	6013      	str	r3, [r2, #0]

		if( speed_current_value > 1000 )
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <Speed_Calculate+0x100>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000850:	d903      	bls.n	800085a <Speed_Calculate+0xda>
		{
			speed_current_value = 1000;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <Speed_Calculate+0x100>)
 8000854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000858:	601a      	str	r2, [r3, #0]
		}

	}

	// Set flag bit for update output.
	speed_flag_upout = 0x01;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <Speed_Calculate+0x104>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
	// Clear count.
	speed_sample_cnt = 0;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <Speed_Calculate+0xf4>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e000      	b.n	800086a <Speed_Calculate+0xea>
		return;
 8000868:	bf00      	nop
}
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000010c 	.word	0x2000010c
 8000878:	200000f8 	.word	0x200000f8
 800087c:	0008a0ee 	.word	0x0008a0ee
 8000880:	200000f0 	.word	0x200000f0
 8000884:	200000f4 	.word	0x200000f4

08000888 <Speed_Update_Output>:

// Speed update output.
void Speed_Update_Output( void )
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	uint32_t temp1;

	// UART #2 busy check.
	if( uart2_tx_cnt )
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <Speed_Update_Output+0x16c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	f040 80a1 	bne.w	80009dc <Speed_Update_Output+0x154>
		// Still busy.
		return;
	}

	// Check flag.
	if( speed_flag_enable == 0x00 )
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <Speed_Update_Output+0x170>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 809d 	beq.w	80009e0 <Speed_Update_Output+0x158>
		// Update task not enable.
		return;
	}

	// Check delay count.
	if( uart2_update_output_delay < 150 )
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <Speed_Update_Output+0x174>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b95      	cmp	r3, #149	; 0x95
 80008ac:	f240 809a 	bls.w	80009e4 <Speed_Update_Output+0x15c>
	{
		// Not done.
		return;
	}
	// Reset delay count.
	uart2_update_output_delay = 0;
 80008b0:	4b52      	ldr	r3, [pc, #328]	; (80009fc <Speed_Update_Output+0x174>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]

	if( speed_flag_upout == 0 )
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <Speed_Update_Output+0x178>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 8093 	beq.w	80009e8 <Speed_Update_Output+0x160>
	{
		return;
	}
	// Clear flag.
	speed_flag_upout = 0;
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <Speed_Update_Output+0x178>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

	temp1 = speed_current_value;
 80008c8:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <Speed_Update_Output+0x17c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	607b      	str	r3, [r7, #4]
	temp1 /= 1000;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a4d      	ldr	r2, [pc, #308]	; (8000a08 <Speed_Update_Output+0x180>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	099b      	lsrs	r3, r3, #6
 80008d8:	607b      	str	r3, [r7, #4]
	uart2_tx_data[0] = (uint8_t)temp1;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <Speed_Update_Output+0x184>)
 80008e0:	701a      	strb	r2, [r3, #0]
	uart2_tx_data[0] += 0x30; // to character.
 80008e2:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <Speed_Update_Output+0x184>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	3330      	adds	r3, #48	; 0x30
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <Speed_Update_Output+0x184>)
 80008ee:	701a      	strb	r2, [r3, #0]
	speed_current_value %= 1000;
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <Speed_Update_Output+0x17c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <Speed_Update_Output+0x180>)
 80008f6:	fba3 1302 	umull	r1, r3, r3, r2
 80008fa:	099b      	lsrs	r3, r3, #6
 80008fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	4a3f      	ldr	r2, [pc, #252]	; (8000a04 <Speed_Update_Output+0x17c>)
 8000908:	6013      	str	r3, [r2, #0]

	temp1 = speed_current_value;
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <Speed_Update_Output+0x17c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	607b      	str	r3, [r7, #4]
	temp1 /= 100;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <Speed_Update_Output+0x188>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	095b      	lsrs	r3, r3, #5
 800091a:	607b      	str	r3, [r7, #4]
	uart2_tx_data[1] = (uint8_t)temp1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <Speed_Update_Output+0x184>)
 8000922:	705a      	strb	r2, [r3, #1]
	uart2_tx_data[1] += 0x30; // to character.
 8000924:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <Speed_Update_Output+0x184>)
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3330      	adds	r3, #48	; 0x30
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <Speed_Update_Output+0x184>)
 8000930:	705a      	strb	r2, [r3, #1]
	speed_current_value %= 100;
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <Speed_Update_Output+0x17c>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <Speed_Update_Output+0x188>)
 8000938:	fba3 1302 	umull	r1, r3, r3, r2
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	2164      	movs	r1, #100	; 0x64
 8000940:	fb01 f303 	mul.w	r3, r1, r3
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <Speed_Update_Output+0x17c>)
 8000948:	6013      	str	r3, [r2, #0]

	temp1 = speed_current_value;
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <Speed_Update_Output+0x17c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	607b      	str	r3, [r7, #4]
	temp1 /= 10;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <Speed_Update_Output+0x18c>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	607b      	str	r3, [r7, #4]
	uart2_tx_data[2] = (uint8_t)temp1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <Speed_Update_Output+0x184>)
 8000962:	709a      	strb	r2, [r3, #2]
	uart2_tx_data[2] += 0x30; // to character.
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <Speed_Update_Output+0x184>)
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3330      	adds	r3, #48	; 0x30
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <Speed_Update_Output+0x184>)
 8000970:	709a      	strb	r2, [r3, #2]
	speed_current_value %= 10;
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <Speed_Update_Output+0x17c>)
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <Speed_Update_Output+0x18c>)
 8000978:	fba3 2301 	umull	r2, r3, r3, r1
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	1aca      	subs	r2, r1, r3
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <Speed_Update_Output+0x17c>)
 800098a:	601a      	str	r2, [r3, #0]

	uart2_tx_data[3] = 0x2e; // '.'
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <Speed_Update_Output+0x184>)
 800098e:	222e      	movs	r2, #46	; 0x2e
 8000990:	70da      	strb	r2, [r3, #3]

	uart2_tx_data[4] = (uint8_t)speed_current_value;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <Speed_Update_Output+0x17c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <Speed_Update_Output+0x184>)
 800099a:	711a      	strb	r2, [r3, #4]
	uart2_tx_data[4] += 0x30; // to character.
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <Speed_Update_Output+0x184>)
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3330      	adds	r3, #48	; 0x30
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <Speed_Update_Output+0x184>)
 80009a8:	711a      	strb	r2, [r3, #4]

	uart2_tx_data[5] = 0x4b; // 'K'
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <Speed_Update_Output+0x184>)
 80009ac:	224b      	movs	r2, #75	; 0x4b
 80009ae:	715a      	strb	r2, [r3, #5]
	uart2_tx_data[6] = 0x4d; // 'M'
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <Speed_Update_Output+0x184>)
 80009b2:	224d      	movs	r2, #77	; 0x4d
 80009b4:	719a      	strb	r2, [r3, #6]
	uart2_tx_data[7] = 0x2f; // '/'
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <Speed_Update_Output+0x184>)
 80009b8:	222f      	movs	r2, #47	; 0x2f
 80009ba:	71da      	strb	r2, [r3, #7]
	uart2_tx_data[8] = 0x48; // 'H'
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <Speed_Update_Output+0x184>)
 80009be:	2248      	movs	r2, #72	; 0x48
 80009c0:	721a      	strb	r2, [r3, #8]

	uart2_tx_data[9] = 0x0d;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <Speed_Update_Output+0x184>)
 80009c4:	220d      	movs	r2, #13
 80009c6:	725a      	strb	r2, [r3, #9]
	uart2_tx_data[10] = 0x0a;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <Speed_Update_Output+0x184>)
 80009ca:	220a      	movs	r2, #10
 80009cc:	729a      	strb	r2, [r3, #10]

	// Prepare UART data output.
	uart2_tx_cnt = 11;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <Speed_Update_Output+0x16c>)
 80009d0:	220b      	movs	r2, #11
 80009d2:	701a      	strb	r2, [r3, #0]
	ptr_uart2_tx_data = uart2_tx_data;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <Speed_Update_Output+0x190>)
 80009d6:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <Speed_Update_Output+0x184>)
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e006      	b.n	80009ea <Speed_Update_Output+0x162>
		return;
 80009dc:	bf00      	nop
 80009de:	e004      	b.n	80009ea <Speed_Update_Output+0x162>
		return;
 80009e0:	bf00      	nop
 80009e2:	e002      	b.n	80009ea <Speed_Update_Output+0x162>
		return;
 80009e4:	bf00      	nop
 80009e6:	e000      	b.n	80009ea <Speed_Update_Output+0x162>
		return;
 80009e8:	bf00      	nop
}
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000064 	.word	0x20000064
 80009f8:	200000ec 	.word	0x200000ec
 80009fc:	20000058 	.word	0x20000058
 8000a00:	200000f4 	.word	0x200000f4
 8000a04:	200000f0 	.word	0x200000f0
 8000a08:	10624dd3 	.word	0x10624dd3
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	51eb851f 	.word	0x51eb851f
 8000a14:	cccccccd 	.word	0xcccccccd
 8000a18:	20000040 	.word	0x20000040

08000a1c <Timer_Tick>:
#include "Buzzer_Task.h"
#include "Speed_Task.h"

// Timer tick task.
void Timer_Tick( void )
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	// Check time base count.
	if( time_base_cnt_10ms < 9 )
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <Timer_Tick+0x134>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	f240 8091 	bls.w	8000b4c <Timer_Tick+0x130>
	{
		// Not done.
		return;
	}
	//
	time_base_cnt_10ms = 0;
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <Timer_Tick+0x134>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]

	// About 10ms past.

	// Increase button debounce count.
	++gpio_btn_dbc;
 8000a30:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <Timer_Tick+0x138>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	4a47      	ldr	r2, [pc, #284]	; (8000b54 <Timer_Tick+0x138>)
 8000a38:	6013      	str	r3, [r2, #0]
	// uart #2 update output delay.
	++uart2_update_output_delay;
 8000a3a:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <Timer_Tick+0x13c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <Timer_Tick+0x13c>)
 8000a42:	6013      	str	r3, [r2, #0]

	// Speed sampling timeout.
	if( speed_sample_cnt )
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <Timer_Tick+0x140>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d011      	beq.n	8000a72 <Timer_Tick+0x56>
	{
		// Increase count.
		++speed_sample_to;
 8000a4e:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <Timer_Tick+0x144>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a42      	ldr	r2, [pc, #264]	; (8000b60 <Timer_Tick+0x144>)
 8000a56:	6013      	str	r3, [r2, #0]
		// Check timeout count.
		if( speed_sample_to == 150 )
 8000a58:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <Timer_Tick+0x144>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b96      	cmp	r3, #150	; 0x96
 8000a5e:	d108      	bne.n	8000a72 <Timer_Tick+0x56>
		{
			// About 1500ms past.
			// Clear count.
			speed_sample_to = 0;
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <Timer_Tick+0x144>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
			speed_sample_cnt = 0;
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <Timer_Tick+0x140>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
			speed_current_value = 0;
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <Timer_Tick+0x148>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
		}
	}


	// UART #1 RX timeout check.
	if( uart1_rx_cnt )
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <Timer_Tick+0x14c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00e      	beq.n	8000a9a <Timer_Tick+0x7e>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart1_rx_to;
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <Timer_Tick+0x150>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a3a      	ldr	r2, [pc, #232]	; (8000b6c <Timer_Tick+0x150>)
 8000a84:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 50 * 10ms ).
		if( tmr_uart1_rx_to == 50 )
 8000a86:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <Timer_Tick+0x150>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b32      	cmp	r3, #50	; 0x32
 8000a8c:	d105      	bne.n	8000a9a <Timer_Tick+0x7e>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart1_rx_to = 0;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <Timer_Tick+0x150>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			uart1_rx_cnt = 0;
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <Timer_Tick+0x14c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
		}
	}

	// UART #2 RX timeout check.
	if( uart2_rx_cnt )
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <Timer_Tick+0x154>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00e      	beq.n	8000ac2 <Timer_Tick+0xa6>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart2_rx_to;
 8000aa4:	4b33      	ldr	r3, [pc, #204]	; (8000b74 <Timer_Tick+0x158>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <Timer_Tick+0x158>)
 8000aac:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 200 * 10ms for human key board input ).
		if( tmr_uart2_rx_to == 200 )
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <Timer_Tick+0x158>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2bc8      	cmp	r3, #200	; 0xc8
 8000ab4:	d105      	bne.n	8000ac2 <Timer_Tick+0xa6>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart2_rx_to = 0;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <Timer_Tick+0x158>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
			uart2_rx_cnt = 0;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <Timer_Tick+0x154>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		}
	}

	// UART #3 RX timeout check.
	if( uart3_rx_cnt )
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <Timer_Tick+0x15c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00e      	beq.n	8000aea <Timer_Tick+0xce>
	{
		// Not empty.
		// Increase timeout count.
		++tmr_uart3_rx_to;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <Timer_Tick+0x160>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <Timer_Tick+0x160>)
 8000ad4:	6013      	str	r3, [r2, #0]
		// Check received timeout count ( 50 * 10ms ).
		if( tmr_uart3_rx_to == 50 )
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <Timer_Tick+0x160>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b32      	cmp	r3, #50	; 0x32
 8000adc:	d105      	bne.n	8000aea <Timer_Tick+0xce>
		{
			// About 500ms past.
			// Clear count.
			tmr_uart3_rx_to = 0;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <Timer_Tick+0x160>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
			uart3_rx_cnt = 0;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <Timer_Tick+0x15c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
		}
	}

	// CAN bus active LED.
	if( gpio_led_can_dly )
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <Timer_Tick+0x164>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <Timer_Tick+0xe2>
	{
		--gpio_led_can_dly;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <Timer_Tick+0x164>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <Timer_Tick+0x164>)
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e001      	b.n	8000b02 <Timer_Tick+0xe6>
	}
	else
	{
		GPIO_LED_CAN_Inactive();
 8000afe:	f7ff fd47 	bl	8000590 <GPIO_LED_CAN_Inactive>
	}

	// UART #1 active LED.
	if( gpio_led_uart1_dly )
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <Timer_Tick+0x168>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <Timer_Tick+0xfa>
	{
		--gpio_led_uart1_dly;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <Timer_Tick+0x168>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <Timer_Tick+0x168>)
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e001      	b.n	8000b1a <Timer_Tick+0xfe>
	}
	else
	{
		GPIO_LED_UART1_Inactive();
 8000b16:	f7ff fd49 	bl	80005ac <GPIO_LED_UART1_Inactive>
	}

	// UART #3 active LED.
	if( gpio_led_uart3_dly )
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <Timer_Tick+0x16c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <Timer_Tick+0x112>
	{
		--gpio_led_uart3_dly;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <Timer_Tick+0x16c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <Timer_Tick+0x16c>)
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e001      	b.n	8000b32 <Timer_Tick+0x116>
	}
	else
	{
		GPIO_LED_UART3_Inactive();
 8000b2e:	f7ff fd4b 	bl	80005c8 <GPIO_LED_UART3_Inactive>
	}

	// Buzzer keep going.
	if( bz_dly )
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <Timer_Tick+0x170>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <Timer_Tick+0x12a>
	{
		// Decrease keep count.
		--bz_dly;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <Timer_Tick+0x170>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <Timer_Tick+0x170>)
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e003      	b.n	8000b4e <Timer_Tick+0x132>
	}
	else
	{
		// Turn off buzzer.
		Buzzer_Off();
 8000b46:	f7ff fc45 	bl	80003d4 <Buzzer_Off>
 8000b4a:	e000      	b.n	8000b4e <Timer_Tick+0x132>
		return;
 8000b4c:	bf00      	nop
	}

}
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000114 	.word	0x20000114
 8000b54:	200000c0 	.word	0x200000c0
 8000b58:	20000058 	.word	0x20000058
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	200000d4 	.word	0x200000d4
 8000b64:	200000f0 	.word	0x200000f0
 8000b68:	2000005f 	.word	0x2000005f
 8000b6c:	20000118 	.word	0x20000118
 8000b70:	20000028 	.word	0x20000028
 8000b74:	2000011c 	.word	0x2000011c
 8000b78:	2000002a 	.word	0x2000002a
 8000b7c:	20000110 	.word	0x20000110
 8000b80:	200000bc 	.word	0x200000bc
 8000b84:	200000d0 	.word	0x200000d0
 8000b88:	200000c4 	.word	0x200000c4
 8000b8c:	200000b8 	.word	0x200000b8

08000b90 <UART2_Rec_Task>:

}

// UART #2 received data resolution task
void UART2_Rec_Task( void )
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	uint8_t temp;

	// Check received count.
	if( uart2_rx_cnt < 5 )
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <UART2_Rec_Task+0xc4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d950      	bls.n	8000c42 <UART2_Rec_Task+0xb2>
	{
		// Received data too few.
		return;
	}
	// Clear received count.
	uart2_rx_cnt = 0;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <UART2_Rec_Task+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
	// Resolution received data.
	// Check end character #2.
	if( uart2_rx_data[4] != 0x0a )
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b0a      	cmp	r3, #10
 8000bae:	d14a      	bne.n	8000c46 <UART2_Rec_Task+0xb6>
	{
		// Not match.
		return;
	}
	// Check end character #2.
	if( uart2_rx_data[3] != 0x0d )
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b0d      	cmp	r3, #13
 8000bb8:	d147      	bne.n	8000c4a <UART2_Rec_Task+0xba>
		// Not match.
		return;
	}

	// Check control code.
	if( uart2_rx_data[0] == 0x61 ) // 'a'
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b61      	cmp	r3, #97	; 0x61
 8000bc2:	d119      	bne.n	8000bf8 <UART2_Rec_Task+0x68>
	{
		// Update DAC output.
		// high quad.
		temp = Char_to_Int( uart2_rx_data[1] );
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fc54 	bl	8000478 <Char_to_Int>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
		temp <<= 4;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	71fb      	strb	r3, [r7, #7]
		// low quad.
		temp |= Char_to_Int( uart2_rx_data[2] );
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000bdc:	789b      	ldrb	r3, [r3, #2]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc49 	bl	8000478 <Char_to_Int>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	71fb      	strb	r3, [r7, #7]
		// Write DAC data.
		DAC1->DHR8R1 = temp;
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <UART2_Rec_Task+0xcc>)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	6113      	str	r3, [r2, #16]
 8000bf6:	e029      	b.n	8000c4c <UART2_Rec_Task+0xbc>
	}
	else if( uart2_rx_data[0] == 0x62 ) // 'b'
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b62      	cmp	r3, #98	; 0x62
 8000c00:	d109      	bne.n	8000c16 <UART2_Rec_Task+0x86>
	{
		// Set flag, enable speed data update output.
		speed_flag_enable = 0x01;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <UART2_Rec_Task+0xd0>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
		// Clear flag, disable battery update output.
		battery_flag_enable = 0x00;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <UART2_Rec_Task+0xd4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
		// Reset delay count.
		uart2_update_output_delay = 0;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <UART2_Rec_Task+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e01a      	b.n	8000c4c <UART2_Rec_Task+0xbc>
	}
	else if( uart2_rx_data[0] == 0x63 ) // 'c'
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <UART2_Rec_Task+0xc8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b63      	cmp	r3, #99	; 0x63
 8000c1e:	d109      	bne.n	8000c34 <UART2_Rec_Task+0xa4>
	{
		// Clear flag, disable update output speed data.
		speed_flag_enable = 0x00;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <UART2_Rec_Task+0xd0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
		// Set flag, enable battery update output.
		battery_flag_enable = 0x01;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <UART2_Rec_Task+0xd4>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		// Reset delay count.
		uart2_update_output_delay= 0;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <UART2_Rec_Task+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e00b      	b.n	8000c4c <UART2_Rec_Task+0xbc>
	}
	else
	{
		// Clear flag, disable update output speed data.
		speed_flag_enable = 0x00;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <UART2_Rec_Task+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
		// Clear flag, disable battery update output.
		battery_flag_enable = 0x00;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <UART2_Rec_Task+0xd4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e004      	b.n	8000c4c <UART2_Rec_Task+0xbc>
		return;
 8000c42:	bf00      	nop
 8000c44:	e002      	b.n	8000c4c <UART2_Rec_Task+0xbc>
		return;
 8000c46:	bf00      	nop
 8000c48:	e000      	b.n	8000c4c <UART2_Rec_Task+0xbc>
		return;
 8000c4a:	bf00      	nop
	}
}
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000028 	.word	0x20000028
 8000c58:	20000044 	.word	0x20000044
 8000c5c:	40007400 	.word	0x40007400
 8000c60:	200000ec 	.word	0x200000ec
 8000c64:	2000005d 	.word	0x2000005d
 8000c68:	20000058 	.word	0x20000058

08000c6c <UART2_Trn_Task>:
	++uart1_tx_index;
}

// UART #2 data transmit task.
void UART2_Trn_Task( void )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
	uint32_t temp;

	// Check TX empty flag bit, bit #7.
	temp = USART2->ISR;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <UART2_Trn_Task+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	607b      	str	r3, [r7, #4]
	temp &= 0x80;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	607b      	str	r3, [r7, #4]
	if( temp == 0 )
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d018      	beq.n	8000cb8 <UART2_Trn_Task+0x4c>
		// Not empty.
		return;
	}

	// Check TX data count.
	if( uart2_tx_cnt == 0 )
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <UART2_Trn_Task+0x60>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d015      	beq.n	8000cbc <UART2_Trn_Task+0x50>
	{
		return;
	}
	// Data output via UART.
	USART2->TDR = *ptr_uart2_tx_data;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <UART2_Trn_Task+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <UART2_Trn_Task+0x5c>)
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	851a      	strh	r2, [r3, #40]	; 0x28
	// For next byte data.
	--uart2_tx_cnt;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <UART2_Trn_Task+0x60>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <UART2_Trn_Task+0x60>)
 8000caa:	701a      	strb	r2, [r3, #0]
	++ptr_uart2_tx_data;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <UART2_Trn_Task+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <UART2_Trn_Task+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e002      	b.n	8000cbe <UART2_Trn_Task+0x52>
		return;
 8000cb8:	bf00      	nop
 8000cba:	e000      	b.n	8000cbe <UART2_Trn_Task+0x52>
		return;
 8000cbc:	bf00      	nop
}
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	20000064 	.word	0x20000064
 8000cd0:	20000040 	.word	0x20000040

08000cd4 <__NVIC_EnableIRQ>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fe5e 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f84e 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 fa80 	bl	8001220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d20:	f000 f9de 	bl	80010e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d24:	f000 f98c 	bl	8001040 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000d28:	f000 fa2a 	bl	8001180 <MX_USART3_UART_Init>
  MX_CAN_Init();
 8000d2c:	f000 f916 	bl	8000f5c <MX_CAN_Init>
  MX_DAC_Init();
 8000d30:	f000 f948 	bl	8000fc4 <MX_DAC_Init>
  MX_ADC1_Init();
 8000d34:	f000 f89e 	bl	8000e74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  Speed_Init();
 8000d38:	f7ff fce4 	bl	8000704 <Speed_Init>


  //
  GPIO_UART1_485_RE();
 8000d3c:	f7ff fbd4 	bl	80004e8 <GPIO_UART1_485_RE>
  GPIO_UART3_485_RE();
 8000d40:	f7ff fbe0 	bl	8000504 <GPIO_UART3_485_RE>

  //
  GPIO_LED1_Off();
 8000d44:	f7ff fbec 	bl	8000520 <GPIO_LED1_Off>
  GPIO_LED2_Off();
 8000d48:	f7ff fbf8 	bl	800053c <GPIO_LED2_Off>
  GPIO_LED3_Off();
 8000d4c:	f7ff fc04 	bl	8000558 <GPIO_LED3_Off>
  GPIO_LED4_Off();
 8000d50:	f7ff fc10 	bl	8000574 <GPIO_LED4_Off>

  //
  uart1_tx_cnt = 0;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <main+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  uart2_tx_cnt = 0;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <main+0x94>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  uart3_tx_cnt = 0;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]

  //
  uart1_flag = 0x00;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <main+0x9c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  uart2_flag = 0x00;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <main+0xa0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
  uart3_flag = 0x00;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <main+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]


  Buzzer_Init();
 8000d78:	f7ff fb3c 	bl	80003f4 <Buzzer_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Timer tick, loop task.
	  Timer_Tick();
 8000d7c:	f7ff fe4e 	bl	8000a1c <Timer_Tick>
	  // UART #1 transmit task.
	  //UART1_Trn_Task();
	  // UART #3 transmit task.
	  //UART3_Trn_Task();
	  // UART #2 transmit task.
	  UART2_Trn_Task();
 8000d80:	f7ff ff74 	bl	8000c6c <UART2_Trn_Task>

	  // UART #2 received task.
	  UART2_Rec_Task();
 8000d84:	f7ff ff04 	bl	8000b90 <UART2_Rec_Task>

	  // Button task.
	  GPIO_Btn_Task();
 8000d88:	f7ff fc2c 	bl	80005e4 <GPIO_Btn_Task>

	  // speed value update.
	  Speed_Calculate();
 8000d8c:	f7ff fcf8 	bl	8000780 <Speed_Calculate>
	  // speed update output.
	  Speed_Update_Output();
 8000d90:	f7ff fd7a 	bl	8000888 <Speed_Update_Output>

	  //
	  Battery_Check();
 8000d94:	f7ff fa18 	bl	80001c8 <Battery_Check>
	  //
	  Battery_Update_Output();
 8000d98:	f7ff fa54 	bl	8000244 <Battery_Update_Output>
	  Timer_Tick();
 8000d9c:	e7ee      	b.n	8000d7c <main+0x6c>
 8000d9e:	bf00      	nop
 8000da0:	200000b7 	.word	0x200000b7
 8000da4:	20000064 	.word	0x20000064
 8000da8:	20000055 	.word	0x20000055
 8000dac:	200000b6 	.word	0x200000b6
 8000db0:	20000029 	.word	0x20000029
 8000db4:	2000005e 	.word	0x2000005e

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09c      	sub	sp, #112	; 0x70
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 ffea 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2234      	movs	r2, #52	; 0x34
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 ffdc 	bl	8004da0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000df2:	2301      	movs	r3, #1
 8000df4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e04:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 ff5e 	bl	8002cd0 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e1a:	f000 fac5 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fe50 	bl	8003ae0 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e46:	f000 faaf 	bl	80013a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000e4a:	2381      	movs	r3, #129	; 0x81
 8000e4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 f876 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e66:	f000 fa9f 	bl	80013a8 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3770      	adds	r7, #112	; 0x70
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */

  // Peripheral clock enable.
  __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_ADC1_Init+0xe0>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <MX_ADC1_Init+0xe0>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6153      	str	r3, [r2, #20]
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_ADC1_Init+0xe0>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ea6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000f00:	f000 fdce 	bl	8001aa0 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000f0a:	f000 fa4d 	bl	80013a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000f2e:	f000 ff3d 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f38:	f000 fa36 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  // Enable.
  ADC1->CR |= 0x00000001;
 8000f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6093      	str	r3, [r2, #8]

  /* USER CODE END ADC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	200001cc 	.word	0x200001cc

08000f5c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f68:	2210      	movs	r2, #16
 8000f6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_CAN_Init+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_CAN_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_CAN_Init+0x60>)
 8000faa:	f001 fa14 	bl	80023d6 <HAL_CAN_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 f9f8 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001a4 	.word	0x200001a4
 8000fc0:	40006400 	.word	0x40006400

08000fc4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  // Enable clock.
  __HAL_RCC_DAC1_CLK_ENABLE();
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_DAC_Init+0x70>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a19      	ldr	r2, [pc, #100]	; (8001034 <MX_DAC_Init+0x70>)
 8000fd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_DAC_Init+0x70>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_DAC_Init+0x74>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_DAC_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ff2:	4811      	ldr	r0, [pc, #68]	; (8001038 <MX_DAC_Init+0x74>)
 8000ff4:	f001 fbfb 	bl	80027ee <HAL_DAC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_DAC_Init+0x3e>
  {
    Error_Handler();
 8000ffe:	f000 f9d3 	bl	80013a8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <MX_DAC_Init+0x74>)
 8001012:	f001 fc0e 	bl	8002832 <HAL_DAC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 800101c:	f000 f9c4 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  // Enable.
  DAC->CR |= 0x00000001;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_DAC_Init+0x78>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <MX_DAC_Init+0x78>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

  /* USER CODE END DAC_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	200002a0 	.word	0x200002a0
 800103c:	40007400 	.word	0x40007400

08001040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

	__HAL_RCC_USART1_CLK_ENABLE();
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <MX_USART1_UART_Init+0x94>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <MX_USART1_UART_Init+0x94>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_USART1_UART_Init+0x94>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <MX_USART1_UART_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001066:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800106a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001080:	220c      	movs	r2, #12
 8001082:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <MX_USART1_UART_Init+0x98>)
 800109e:	f003 f8e7 	bl	8004270 <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80010a8:	f000 f97e 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART1->CR1 |= 0x20;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART1_UART_Init+0x9c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <MX_USART1_UART_Init+0x9c>)
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART1_IRQn );
 80010b8:	2025      	movs	r0, #37	; 0x25
 80010ba:	f7ff fe0b 	bl	8000cd4 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART1->CR1 |= 0x01;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_USART1_UART_Init+0x9c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <MX_USART1_UART_Init+0x9c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	2000021c 	.word	0x2000021c
 80010dc:	40013800 	.word	0x40013800

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	__HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_USART2_UART_Init+0x94>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <MX_USART2_UART_Init+0x94>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_USART2_UART_Init+0x94>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_USART2_UART_Init+0x9c>)
 8001102:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001106:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800110a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART2_UART_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART2_UART_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001120:	220c      	movs	r2, #12
 8001122:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_USART2_UART_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART2_UART_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113c:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_USART2_UART_Init+0x98>)
 800113e:	f003 f897 	bl	8004270 <HAL_UART_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001148:	f000 f92e 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART2->CR1 |= 0x20;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x9c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <MX_USART2_UART_Init+0x9c>)
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART2_IRQn );
 8001158:	2026      	movs	r0, #38	; 0x26
 800115a:	f7ff fdbb 	bl	8000cd4 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART2->CR1 |= 0x01;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_USART2_UART_Init+0x9c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <MX_USART2_UART_Init+0x9c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	200002b4 	.word	0x200002b4
 800117c:	40004400 	.word	0x40004400

08001180 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

	__HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_USART3_UART_Init+0x94>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <MX_USART3_UART_Init+0x94>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_USART3_UART_Init+0x94>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <MX_USART3_UART_Init+0x9c>)
 80011a2:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011a6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011aa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011c0:	220c      	movs	r2, #12
 80011c2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <MX_USART3_UART_Init+0x98>)
 80011de:	f003 f847 	bl	8004270 <HAL_UART_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80011e8:	f000 f8de 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  // Enable RXNE interrupt, bit #5.
  USART3->CR1 |= 0x20;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART3_UART_Init+0x9c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <MX_USART3_UART_Init+0x9c>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6013      	str	r3, [r2, #0]
  // Enable IRQ.
  NVIC_EnableIRQ( USART3_IRQn );
 80011f8:	2027      	movs	r0, #39	; 0x27
 80011fa:	f7ff fd6b 	bl	8000cd4 <__NVIC_EnableIRQ>
  // Enable UART, bit #0.
  USART3->CR1 |= 0x01;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_USART3_UART_Init+0x9c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <MX_USART3_UART_Init+0x9c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART3_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	20000120 	.word	0x20000120
 800121c:	40004800 	.word	0x40004800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <MX_GPIO_Init+0x178>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a57      	ldr	r2, [pc, #348]	; (8001398 <MX_GPIO_Init+0x178>)
 800123c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b55      	ldr	r3, [pc, #340]	; (8001398 <MX_GPIO_Init+0x178>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <MX_GPIO_Init+0x178>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a51      	ldr	r2, [pc, #324]	; (8001398 <MX_GPIO_Init+0x178>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <MX_GPIO_Init+0x178>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <MX_GPIO_Init+0x178>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <MX_GPIO_Init+0x178>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <MX_GPIO_Init+0x178>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <MX_GPIO_Init+0x178>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a45      	ldr	r2, [pc, #276]	; (8001398 <MX_GPIO_Init+0x178>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MX_GPIO_Init+0x178>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <MX_GPIO_Init+0x178>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a3f      	ldr	r2, [pc, #252]	; (8001398 <MX_GPIO_Init+0x178>)
 800129c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <MX_GPIO_Init+0x178>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80012b4:	4839      	ldr	r0, [pc, #228]	; (800139c <MX_GPIO_Init+0x17c>)
 80012b6:	f001 fcf3 	bl	8002ca0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f001 fced 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f242 0106 	movw	r1, #8198	; 0x2006
 80012cc:	4834      	ldr	r0, [pc, #208]	; (80013a0 <MX_GPIO_Init+0x180>)
 80012ce:	f001 fce7 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_GPIO_Init+0x184>)
 80012d8:	f001 fce2 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 80012dc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_GPIO_Init+0x17c>)
 80012f6:	f001 fb61 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012fa:	2320      	movs	r3, #32
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f001 fb50 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f001 fb41 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800133a:	f44f 7358 	mov.w	r3, #864	; 0x360
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_GPIO_Init+0x17c>)
 8001350:	f001 fb34 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|LD2_Pin;
 8001354:	f242 0306 	movw	r3, #8198	; 0x2006
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_GPIO_Init+0x180>)
 800136e:	f001 fb25 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001372:	2304      	movs	r3, #4
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_GPIO_Init+0x184>)
 800138a:	f001 fb17 	bl	80029bc <HAL_GPIO_Init>

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000c00 	.word	0x48000c00

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x44>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_MspInit+0x44>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ea:	2007      	movs	r0, #7
 80013ec:	f001 f9be 	bl	800276c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d123      	bne.n	8001466 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_ADC_MspInit+0x74>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <HAL_ADC_MspInit+0x74>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_ADC_MspInit+0x74>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_ADC_MspInit+0x74>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_ADC_MspInit+0x74>)
 800143c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_ADC_MspInit+0x74>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144e:	2301      	movs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <HAL_ADC_MspInit+0x78>)
 8001462:	f001 faab 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800

08001478 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_CAN_MspInit+0x80>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d129      	bne.n	80014ee <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_CAN_MspInit+0x84>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80014dc:	2309      	movs	r3, #9
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f001 fa67 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40006400 	.word	0x40006400
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <HAL_DAC_MspInit+0x74>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d124      	bne.n	800156c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_DAC_MspInit+0x78>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_DAC_MspInit+0x78>)
 8001528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_DAC_MspInit+0x78>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_DAC_MspInit+0x78>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_DAC_MspInit+0x78>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_DAC_MspInit+0x78>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001552:	2310      	movs	r3, #16
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001556:	2303      	movs	r3, #3
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f001 fa28 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40007400 	.word	0x40007400
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a53      	ldr	r2, [pc, #332]	; (80016e8 <HAL_UART_MspInit+0x16c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d132      	bne.n	8001604 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_UART_MspInit+0x170>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e0:	2307      	movs	r3, #7
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f001 f9e5 	bl	80029bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2025      	movs	r0, #37	; 0x25
 80015f8:	f001 f8c3 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fc:	2025      	movs	r0, #37	; 0x25
 80015fe:	f001 f8dc 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001602:	e06c      	b.n	80016de <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <HAL_UART_MspInit+0x174>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d131      	bne.n	8001672 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a36      	ldr	r2, [pc, #216]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_UART_MspInit+0x170>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_UART_MspInit+0x170>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800163e:	230c      	movs	r3, #12
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 f9ae 	bl	80029bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f001 f88c 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166a:	2026      	movs	r0, #38	; 0x26
 800166c:	f001 f8a5 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 8001670:	e035      	b.n	80016de <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_UART_MspInit+0x178>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d130      	bne.n	80016de <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_UART_MspInit+0x170>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001686:	61d3      	str	r3, [r2, #28]
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_UART_MspInit+0x170>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0x170>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_UART_MspInit+0x170>)
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	6153      	str	r3, [r2, #20]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_UART_MspInit+0x170>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016be:	2307      	movs	r3, #7
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_UART_MspInit+0x17c>)
 80016ca:	f001 f977 	bl	80029bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2027      	movs	r0, #39	; 0x27
 80016d4:	f001 f855 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016d8:	2027      	movs	r0, #39	; 0x27
 80016da:	f001 f86e 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	; 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40004800 	.word	0x40004800
 80016f8:	48000400 	.word	0x48000400

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f98a 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //
  ++time_base_cnt_10ms;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <SysTick_Handler+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	4a02      	ldr	r2, [pc, #8]	; (800175c <SysTick_Handler+0x18>)
 8001754:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000114 	.word	0x20000114

08001760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART1->ISR;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <USART1_IRQHandler+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	607b      	str	r3, [r7, #4]
	if( temp )
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d018      	beq.n	80017ac <USART1_IRQHandler+0x4c>
	{
		// Reset timeout count.
		tmr_uart1_rx_to = 0;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <USART1_IRQHandler+0x60>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart1_rx_data[ uart1_rx_cnt ] = ( uint8_t )USART1->RDR;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <USART1_IRQHandler+0x5c>)
 8001782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001784:	b299      	uxth	r1, r3
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <USART1_IRQHandler+0x64>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <USART1_IRQHandler+0x68>)
 8001792:	5499      	strb	r1, [r3, r2]

		// Increase data received count.
		if( uart1_rx_cnt < FJBSCT_UART1_REC_MAX )
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <USART1_IRQHandler+0x64>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b0f      	cmp	r3, #15
 800179c:	d806      	bhi.n	80017ac <USART1_IRQHandler+0x4c>
		{
			++uart1_rx_cnt;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <USART1_IRQHandler+0x64>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <USART1_IRQHandler+0x64>)
 80017aa:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <USART1_IRQHandler+0x6c>)
 80017ae:	f002 fdad 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40013800 	.word	0x40013800
 80017c0:	20000118 	.word	0x20000118
 80017c4:	2000005f 	.word	0x2000005f
 80017c8:	200000a4 	.word	0x200000a4
 80017cc:	2000021c 	.word	0x2000021c

080017d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART2->ISR;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <USART2_IRQHandler+0x70>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	607b      	str	r3, [r7, #4]
	if( temp )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d022      	beq.n	8001830 <USART2_IRQHandler+0x60>
	{
		// Reset timeout count.
		tmr_uart2_rx_to = 0;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <USART2_IRQHandler+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart2_rx_data[ uart2_rx_cnt ] = ( uint8_t )USART2->RDR;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <USART2_IRQHandler+0x70>)
 80017f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017f4:	b299      	uxth	r1, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <USART2_IRQHandler+0x78>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <USART2_IRQHandler+0x7c>)
 8001802:	5499      	strb	r1, [r3, r2]
		// Feed back.
		USART2->TDR = uart2_rx_data[ uart2_rx_cnt ];
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <USART2_IRQHandler+0x78>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <USART2_IRQHandler+0x7c>)
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <USART2_IRQHandler+0x70>)
 8001814:	b292      	uxth	r2, r2
 8001816:	851a      	strh	r2, [r3, #40]	; 0x28

		if( uart2_rx_cnt < FJBSCT_UART2_REC_MAX )
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <USART2_IRQHandler+0x78>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b0f      	cmp	r3, #15
 8001820:	d806      	bhi.n	8001830 <USART2_IRQHandler+0x60>
		{
			++uart2_rx_cnt;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <USART2_IRQHandler+0x78>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <USART2_IRQHandler+0x78>)
 800182e:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <USART2_IRQHandler+0x80>)
 8001832:	f002 fd6b 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004400 	.word	0x40004400
 8001844:	2000011c 	.word	0x2000011c
 8001848:	20000028 	.word	0x20000028
 800184c:	20000044 	.word	0x20000044
 8001850:	200002b4 	.word	0x200002b4

08001854 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	uint32_t temp;

	// Check RX interrupt flag bit, bit #5.
	temp = USART3->ISR;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <USART3_IRQHandler+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	607b      	str	r3, [r7, #4]
	temp &= 0x00000020;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	607b      	str	r3, [r7, #4]
	if( temp )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d018      	beq.n	80018a0 <USART3_IRQHandler+0x4c>
	{
		// Reset timeout count.
		tmr_uart3_rx_to = 0;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <USART3_IRQHandler+0x60>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
		// Hold received data.
		uart3_rx_data[ uart3_rx_cnt ] = ( uint8_t )USART3->RDR;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <USART3_IRQHandler+0x5c>)
 8001876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001878:	b299      	uxth	r1, r3
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <USART3_IRQHandler+0x64>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	b2c9      	uxtb	r1, r1
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <USART3_IRQHandler+0x68>)
 8001886:	5499      	strb	r1, [r3, r2]

		if( uart3_rx_cnt < FJBSCT_UART3_REC_MAX )
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <USART3_IRQHandler+0x64>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b0f      	cmp	r3, #15
 8001890:	d806      	bhi.n	80018a0 <USART3_IRQHandler+0x4c>
		{
			++uart3_rx_cnt;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <USART3_IRQHandler+0x64>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <USART3_IRQHandler+0x64>)
 800189e:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a0:	4807      	ldr	r0, [pc, #28]	; (80018c0 <USART3_IRQHandler+0x6c>)
 80018a2:	f002 fd33 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40004800 	.word	0x40004800
 80018b4:	20000110 	.word	0x20000110
 80018b8:	2000002a 	.word	0x2000002a
 80018bc:	2000007c 	.word	0x2000007c
 80018c0:	20000120 	.word	0x20000120

080018c4 <TIM2_IRQHandler>:

/* USER CODE BEGIN 1 */

//
void TIM2_IRQHandler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
	uint16_t temp;

	// Check flag bit, CC1 ( bit #1 ).
	temp = TIM2->SR;
 80018ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	80fb      	strh	r3, [r7, #6]
	temp &= 0x02;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	80fb      	strh	r3, [r7, #6]
	if( temp != 0 )
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d02f      	beq.n	8001940 <TIM2_IRQHandler+0x7c>
	{
		// Reset timeout count.
		speed_sample_to = 0;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <TIM2_IRQHandler+0x88>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		// Check received count.
		if( speed_sample_cnt < SPEED_SAMPLE_CNT )
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <TIM2_IRQHandler+0x8c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d81e      	bhi.n	800192e <TIM2_IRQHandler+0x6a>
		{
			// Keep count value, period value.
			speed_pulse_period[ speed_sample_cnt ] = TIM2->CCR1;
 80018f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <TIM2_IRQHandler+0x8c>)
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <TIM2_IRQHandler+0x90>)
 8001900:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			// Keep count value, duty value.
			speed_pulse_duty[ speed_sample_cnt ] = TIM2->CCR2;
 8001904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <TIM2_IRQHandler+0x8c>)
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	4611      	mov	r1, r2
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	4a11      	ldr	r2, [pc, #68]	; (8001958 <TIM2_IRQHandler+0x94>)
 8001914:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			// Clear count.
			TIM2->CNT = 0;
 8001918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
			// Increase count.
			++speed_sample_cnt;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <TIM2_IRQHandler+0x8c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <TIM2_IRQHandler+0x8c>)
 800192c:	701a      	strb	r2, [r3, #0]
		}
		// Clear flag bit.
		TIM2->SR &= 0xf9f9;
 800192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001938:	f64f 13f9 	movw	r3, #63993	; 0xf9f9
 800193c:	4013      	ands	r3, r2
 800193e:	610b      	str	r3, [r1, #16]
	}
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	200000d4 	.word	0x200000d4
 8001950:	2000010c 	.word	0x2000010c
 8001954:	200000f8 	.word	0x200000f8
 8001958:	200000d8 	.word	0x200000d8

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f003 f9d3 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff f9ad 	bl	8000d10 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019c4:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 80019c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019cc:	2000033c 	.word	0x2000033c

080019d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x28>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x28>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 fec1 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fce0 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fed9 	bl	80027d6 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 fea1 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000338 	.word	0x20000338

08001a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000338 	.word	0x20000338

08001aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09a      	sub	sp, #104	; 0x68
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e169      	b.n	8001d94 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d176      	bne.n	8001bc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d152      	bne.n	8001b80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fc81 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d13b      	bne.n	8001b80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fc05 	bl	8002318 <ADC_Disable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d12f      	bne.n	8001b80 <HAL_ADC_Init+0xe0>
 8001b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d12b      	bne.n	8001b80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b30:	f023 0302 	bic.w	r3, r3, #2
 8001b34:	f043 0202 	orr.w	r2, r3, #2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_ADC_Init+0x2fc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a8f      	ldr	r2, [pc, #572]	; (8001da0 <HAL_ADC_Init+0x300>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9a      	lsrs	r2, r3, #18
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b9c:	d110      	bne.n	8001bc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f023 0312 	bic.w	r3, r3, #18
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 80d6 	bne.w	8001d7a <HAL_ADC_Init+0x2da>
 8001bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80d1 	bne.w	8001d7a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80c9 	bne.w	8001d7a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bf0:	f043 0202 	orr.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_ADC_Init+0x304>)
 8001bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_ADC_Init+0x180>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_Init+0x180>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_ADC_Init+0x182>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11c      	bne.n	8001c60 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c26:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_ADC_Init+0x1a8>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_Init+0x1a8>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_ADC_Init+0x1aa>
 8001c48:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e5b      	ldrb	r3, [r3, #25]
 8001c64:	035b      	lsls	r3, r3, #13
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6a:	2a01      	cmp	r2, #1
 8001c6c:	d002      	beq.n	8001c74 <HAL_ADC_Init+0x1d4>
 8001c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_Init+0x1d6>
 8001c74:	2200      	movs	r2, #0
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c86:	4313      	orrs	r3, r2
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11b      	bne.n	8001ccc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e5b      	ldrb	r3, [r3, #25]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	045a      	lsls	r2, r3, #17
 8001ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	663b      	str	r3, [r7, #96]	; 0x60
 8001cae:	e00d      	b.n	8001ccc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d007      	beq.n	8001ce4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d114      	bne.n	8001d1c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
 8001d0a:	039a      	lsls	r2, r3, #14
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4313      	orrs	r3, r2
 8001d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_ADC_Init+0x308>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10c      	bne.n	8001d52 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f023 010f 	bic.w	r1, r3, #15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	e007      	b.n	8001d62 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 020f 	bic.w	r2, r2, #15
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
 8001d78:	e00a      	b.n	8001d90 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f023 0312 	bic.w	r3, r3, #18
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3768      	adds	r7, #104	; 0x68
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	50000300 	.word	0x50000300
 8001da8:	fff0c007 	.word	0xfff0c007

08001dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b09b      	sub	sp, #108	; 0x6c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x22>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e299      	b.n	8002302 <HAL_ADC_ConfigChannel+0x556>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 827d 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d81c      	bhi.n	8001e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	461a      	mov	r2, r3
 8001e02:	231f      	movs	r3, #31
 8001e04:	4093      	lsls	r3, r2
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4019      	ands	r1, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
 8001e26:	e063      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d81e      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	221f      	movs	r2, #31
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4019      	ands	r1, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3b1e      	subs	r3, #30
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6c:	e040      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b0e      	cmp	r3, #14
 8001e74:	d81e      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	3b3c      	subs	r3, #60	; 0x3c
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	3b3c      	subs	r3, #60	; 0x3c
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb2:	e01d      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	3b5a      	subs	r3, #90	; 0x5a
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	4019      	ands	r1, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	3b5a      	subs	r3, #90	; 0x5a
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80e5 	bne.w	80020ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d91c      	bls.n	8001f42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6999      	ldr	r1, [r3, #24]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e019      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6959      	ldr	r1, [r3, #20]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d84f      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x28c>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fd3 	.word	0x08001fd3
 8001fa8:	08001ff5 	.word	0x08001ff5
 8001fac:	08002017 	.word	0x08002017
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fb6:	4b99      	ldr	r3, [pc, #612]	; (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	0691      	lsls	r1, r2, #26
 8001fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd0:	e07e      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	0691      	lsls	r1, r2, #26
 8001fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ff0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ff2:	e06d      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	0691      	lsls	r1, r2, #26
 8002004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002006:	430a      	orrs	r2, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002012:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002014:	e05c      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800201c:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_ADC_ConfigChannel+0x470>)
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	0691      	lsls	r1, r2, #26
 8002026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002028:	430a      	orrs	r2, r1
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002034:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002036:	e04b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800205a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	429a      	cmp	r2, r3
 800206e:	d107      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800207e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	069b      	lsls	r3, r3, #26
 8002090:	429a      	cmp	r2, r3
 8002092:	d107      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	069b      	lsls	r3, r3, #26
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10a      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020c8:	e001      	b.n	80020ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80020ca:	bf00      	nop
 80020cc:	e000      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80020ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x344>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x344>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x346>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 80ff 	bne.w	80022f6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d00f      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800211e:	e049      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b09      	cmp	r3, #9
 8002140:	d91c      	bls.n	800217c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6999      	ldr	r1, [r3, #24]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	3b1b      	subs	r3, #27
 8002154:	2207      	movs	r2, #7
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	4019      	ands	r1, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6898      	ldr	r0, [r3, #8]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1b      	subs	r3, #27
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	e01b      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6959      	ldr	r1, [r3, #20]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6898      	ldr	r0, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_ADC_ConfigChannel+0x474>)
 80021b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d105      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d014      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	f040 8086 	bne.w	80022f6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d17f      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10d      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x478>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x478>
 8002216:	2301      	movs	r3, #1
 8002218:	e005      	b.n	8002226 <HAL_ADC_ConfigChannel+0x47a>
 800221a:	bf00      	nop
 800221c:	83fff000 	.word	0x83fff000
 8002220:	50000300 	.word	0x50000300
 8002224:	2300      	movs	r3, #0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d150      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800222a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x4a0>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x4a0>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_ADC_ConfigChannel+0x4a2>
 800224c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13c      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b10      	cmp	r3, #16
 8002258:	d11d      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4ea>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002262:	d118      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_ADC_ConfigChannel+0x564>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_ADC_ConfigChannel+0x568>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9a      	lsrs	r2, r3, #18
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002286:	e002      	b.n	800228e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3b01      	subs	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002294:	e02e      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b11      	cmp	r3, #17
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x50a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a6:	d106      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b4:	e01e      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d11a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022ca:	e013      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022de:	e00a      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002302:	4618      	mov	r0, r3
 8002304:	376c      	adds	r7, #108	; 0x6c
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000
 8002314:	431bde83 	.word	0x431bde83

08002318 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <ADC_Disable+0x2c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <ADC_Disable+0x2c>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <ADC_Disable+0x2e>
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d040      	beq.n	80023cc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030d 	and.w	r3, r3, #13
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10f      	bne.n	8002378 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0202 	orr.w	r2, r2, #2
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2203      	movs	r2, #3
 800236e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002370:	f7ff fb8a 	bl	8001a88 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002376:	e022      	b.n	80023be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01c      	b.n	80023ce <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002394:	f7ff fb78 	bl	8001a88 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d90d      	bls.n	80023be <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e007      	b.n	80023ce <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d0e3      	beq.n	8002394 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ed      	b.n	80025c4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f83f 	bl	8001478 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240a:	f7ff fb3d 	bl	8001a88 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002410:	e012      	b.n	8002438 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002412:	f7ff fb39 	bl	8001a88 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b0a      	cmp	r3, #10
 800241e:	d90b      	bls.n	8002438 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2205      	movs	r2, #5
 8002430:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0c5      	b.n	80025c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e5      	bne.n	8002412 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002456:	f7ff fb17 	bl	8001a88 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800245c:	e012      	b.n	8002484 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800245e:	f7ff fb13 	bl	8001a88 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b0a      	cmp	r3, #10
 800246a:	d90b      	bls.n	8002484 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e09f      	b.n	80025c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0e5      	beq.n	800245e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7e1b      	ldrb	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7e5b      	ldrb	r3, [r3, #25]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7e9b      	ldrb	r3, [r3, #26]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0220 	bic.w	r2, r2, #32
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7edb      	ldrb	r3, [r3, #27]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e007      	b.n	800253a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0210 	orr.w	r2, r2, #16
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7f1b      	ldrb	r3, [r3, #28]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0208 	orr.w	r2, r2, #8
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e007      	b.n	8002564 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0208 	bic.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d108      	bne.n	800257e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0204 	orr.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e007      	b.n	800258e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0204 	bic.w	r2, r2, #4
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	ea42 0103 	orr.w	r1, r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <__NVIC_SetPriorityGrouping>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e014      	b.n	800282a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fe fe75 	bl	8001500 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	795b      	ldrb	r3, [r3, #5]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_DAC_ConfigChannel+0x20>
 800284e:	2302      	movs	r3, #2
 8002850:	e036      	b.n	80028c0 <HAL_DAC_ConfigChannel+0x8e>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2202      	movs	r2, #2
 800285c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002866:	f640 72fe 	movw	r2, #4094	; 0xffe
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	22c0      	movs	r2, #192	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43da      	mvns	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e020      	b.n	8002932 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020e 	bic.w	r2, r2, #14
 80028fe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002950:	2b02      	cmp	r3, #2
 8002952:	d005      	beq.n	8002960 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e027      	b.n	80029b0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    } 
  }
  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	e14e      	b.n	8002c6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8140 	beq.w	8002c64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d00b      	beq.n	8002a04 <HAL_GPIO_Init+0x48>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b12      	cmp	r3, #18
 8002a02:	d130      	bne.n	8002a66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0201 	and.w	r2, r3, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0xea>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d123      	bne.n	8002aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	6939      	ldr	r1, [r7, #16]
 8002aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0203 	and.w	r2, r3, #3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 809a 	beq.w	8002c64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b30:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <HAL_GPIO_Init+0x2cc>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <HAL_GPIO_Init+0x2cc>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x2cc>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b72:	d013      	beq.n	8002b9c <HAL_GPIO_Init+0x1e0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a46      	ldr	r2, [pc, #280]	; (8002c90 <HAL_GPIO_Init+0x2d4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00d      	beq.n	8002b98 <HAL_GPIO_Init+0x1dc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a45      	ldr	r2, [pc, #276]	; (8002c94 <HAL_GPIO_Init+0x2d8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_Init+0x1d8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a44      	ldr	r2, [pc, #272]	; (8002c98 <HAL_GPIO_Init+0x2dc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_GPIO_Init+0x1d4>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e006      	b.n	8002b9e <HAL_GPIO_Init+0x1e2>
 8002b90:	2305      	movs	r3, #5
 8002b92:	e004      	b.n	8002b9e <HAL_GPIO_Init+0x1e2>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x1e2>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_GPIO_Init+0x1e2>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	f002 0203 	and.w	r2, r2, #3
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	4093      	lsls	r3, r2
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bae:	4937      	ldr	r1, [pc, #220]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002be0:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <HAL_GPIO_Init+0x2e0>)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3301      	adds	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f aea9 	bne.w	80029cc <HAL_GPIO_Init+0x10>
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	48000400 	.word	0x48000400
 8002c94:	48000800 	.word	0x48000800
 8002c98:	48000c00 	.word	0x48000c00
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f000 bef4 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 816a 	beq.w	8002fce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cfa:	4bb3      	ldr	r3, [pc, #716]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d06:	4bb0      	ldr	r3, [pc, #704]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d159      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
 8002d12:	4bad      	ldr	r3, [pc, #692]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d152      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0x82>
 8002d4c:	4b9e      	ldr	r3, [pc, #632]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0xae>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d6e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d7a:	4b93      	ldr	r3, [pc, #588]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d92:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 810c 	beq.w	8002fcc <HAL_RCC_OscConfig+0x2fc>
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 8106 	bne.w	8002fcc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f000 be86 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x110>
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e030      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x134>
 8002dea:	4b77      	ldr	r3, [pc, #476]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a76      	ldr	r2, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01e      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x15a>
 8002e10:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6c      	ldr	r2, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a66      	ldr	r2, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f023 020f 	bic.w	r2, r3, #15
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	495d      	ldr	r1, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d059      	beq.n	8002f14 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fe12 	bl	8001a88 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fe0d 	bl	8001a88 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d902      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f000 be29 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1e2>
 8002eac:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x20e>
 8002eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ece:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ee6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002eea:	fa92 f2a2 	rbit	r2, r2
 8002eee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ef2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ef6:	fab2 f282 	clz	r2, r2
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f042 0220 	orr.w	r2, r2, #32
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f002 021f 	and.w	r2, r2, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ab      	beq.n	8002e6a <HAL_RCC_OscConfig+0x19a>
 8002f12:	e05c      	b.n	8002fce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fdb8 	bl	8001a88 <HAL_GetTick>
 8002f18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fdb3 	bl	8001a88 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d902      	bls.n	8002f34 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	f000 bdcf 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x296>
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	e015      	b.n	8002f92 <HAL_RCC_OscConfig+0x2c2>
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCC_OscConfig+0x2f8>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fa6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ab      	bne.n	8002f1e <HAL_RCC_OscConfig+0x24e>
 8002fc6:	e002      	b.n	8002fce <HAL_RCC_OscConfig+0x2fe>
 8002fc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 816f 	beq.w	80032bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fde:	4bd0      	ldr	r3, [pc, #832]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fea:	4bcd      	ldr	r3, [pc, #820]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d16c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x400>
 8002ff6:	4bca      	ldr	r3, [pc, #808]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d166      	bne.n	80030d0 <HAL_RCC_OscConfig+0x400>
 8003002:	2302      	movs	r3, #2
 8003004:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003014:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_RCC_OscConfig+0x362>
 800302c:	4bbc      	ldr	r3, [pc, #752]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	e013      	b.n	800305a <HAL_RCC_OscConfig+0x38a>
 8003032:	2302      	movs	r3, #2
 8003034:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800304a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003056:	4bb2      	ldr	r3, [pc, #712]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2202      	movs	r2, #2
 800305c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003060:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800306c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f002 021f 	and.w	r2, r2, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_RCC_OscConfig+0x3cc>
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d002      	beq.n	800309c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f000 bd1b 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4ba0      	ldr	r3, [pc, #640]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	21f8      	movs	r1, #248	; 0xf8
 80030ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030b4:	fa91 f1a1 	rbit	r1, r1
 80030b8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030c0:	fab1 f181 	clz	r1, r1
 80030c4:	b2c9      	uxtb	r1, r1
 80030c6:	408b      	lsls	r3, r1
 80030c8:	4995      	ldr	r1, [pc, #596]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e0f5      	b.n	80032bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8085 	beq.w	80031e6 <HAL_RCC_OscConfig+0x516>
 80030dc:	2301      	movs	r3, #1
 80030de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	2301      	movs	r3, #1
 8003106:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fcbe 	bl	8001a88 <HAL_GetTick>
 800310c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe fcb9 	bl	8001a88 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	f000 bcd5 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
 8003128:	2302      	movs	r3, #2
 800312a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800313a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_RCC_OscConfig+0x488>
 8003152:	4b73      	ldr	r3, [pc, #460]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e013      	b.n	8003180 <HAL_RCC_OscConfig+0x4b0>
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800316a:	2302      	movs	r3, #2
 800316c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003170:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2202      	movs	r2, #2
 8003182:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003186:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800318a:	fa92 f2a2 	rbit	r2, r2
 800318e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003192:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003196:	fab2 f282 	clz	r2, r2
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f042 0220 	orr.w	r2, r2, #32
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f002 021f 	and.w	r2, r2, #31
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0af      	beq.n	8003112 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	21f8      	movs	r1, #248	; 0xf8
 80031c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031ca:	fa91 f1a1 	rbit	r1, r1
 80031ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031d6:	fab1 f181 	clz	r1, r1
 80031da:	b2c9      	uxtb	r1, r1
 80031dc:	408b      	lsls	r3, r1
 80031de:	4950      	ldr	r1, [pc, #320]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
 80031e4:	e06a      	b.n	80032bc <HAL_RCC_OscConfig+0x5ec>
 80031e6:	2301      	movs	r3, #1
 80031e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	461a      	mov	r2, r3
 800320e:	2300      	movs	r3, #0
 8003210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe fc39 	bl	8001a88 <HAL_GetTick>
 8003216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fc34 	bl	8001a88 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d902      	bls.n	8003232 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	f000 bc50 	b.w	8003ad2 <HAL_RCC_OscConfig+0xe02>
 8003232:	2302      	movs	r3, #2
 8003234:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_OscConfig+0x592>
 800325c:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e013      	b.n	800328a <HAL_RCC_OscConfig+0x5ba>
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003274:	2302      	movs	r3, #2
 8003276:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800327a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_RCC_OscConfig+0x650>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2202      	movs	r2, #2
 800328c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003290:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003294:	fa92 f2a2 	rbit	r2, r2
 8003298:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800329c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032a0:	fab2 f282 	clz	r2, r2
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f002 021f 	and.w	r2, r2, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f202 	lsl.w	r2, r1, r2
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1af      	bne.n	800321c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80da 	beq.w	8003480 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d069      	beq.n	80033aa <HAL_RCC_OscConfig+0x6da>
 80032d6:	2301      	movs	r3, #1
 80032d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_OscConfig+0x654>)
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	2301      	movs	r3, #1
 80032fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7fe fbc2 	bl	8001a88 <HAL_GetTick>
 8003304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe fbbd 	bl	8001a88 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d906      	bls.n	8003328 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e3d9      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	10908120 	.word	0x10908120
 8003328:	2302      	movs	r3, #2
 800332a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800333a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003356:	2202      	movs	r2, #2
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003368:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4ba5      	ldr	r3, [pc, #660]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003372:	2102      	movs	r1, #2
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f1a3 	rbit	r1, r3
 8003380:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003384:	6019      	str	r1, [r3, #0]
  return result;
 8003386:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0b0      	beq.n	800330a <HAL_RCC_OscConfig+0x63a>
 80033a8:	e06a      	b.n	8003480 <HAL_RCC_OscConfig+0x7b0>
 80033aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_OscConfig+0x934>)
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fb54 	bl	8001a88 <HAL_GetTick>
 80033e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fe fb4f 	bl	8001a88 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e36b      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 80033fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033fe:	2202      	movs	r2, #2
 8003400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003416:	2202      	movs	r2, #2
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003440:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003442:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800344a:	2102      	movs	r1, #2
 800344c:	6019      	str	r1, [r3, #0]
 800344e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f1a3 	rbit	r1, r3
 8003458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800345c:	6019      	str	r1, [r3, #0]
  return result;
 800345e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1b2      	bne.n	80033e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8158 	beq.w	8003740 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4a56      	ldr	r2, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	61d3      	str	r3, [r2, #28]
 80034ae:	4b54      	ldr	r3, [pc, #336]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCC_OscConfig+0x938>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11a      	bne.n	800350a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d4:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <HAL_RCC_OscConfig+0x938>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_RCC_OscConfig+0x938>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fad2 	bl	8001a88 <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e009      	b.n	80034fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe facd 	bl	8001a88 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e2e9      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b42      	ldr	r3, [pc, #264]	; (8003608 <HAL_RCC_OscConfig+0x938>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ef      	beq.n	80034ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x852>
 8003514:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a39      	ldr	r2, [pc, #228]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02f      	b.n	8003582 <HAL_RCC_OscConfig+0x8b2>
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x876>
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a33      	ldr	r2, [pc, #204]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800353e:	f023 0304 	bic.w	r3, r3, #4
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e01d      	b.n	8003582 <HAL_RCC_OscConfig+0x8b2>
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x89a>
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x8b2>
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d06b      	beq.n	8003664 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe fa7c 	bl	8001a88 <HAL_GetTick>
 8003590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe fa77 	bl	8001a88 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e291      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 80035ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035b2:	2202      	movs	r2, #2
 80035b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ca:	2202      	movs	r2, #2
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035dc:	601a      	str	r2, [r3, #0]
  return result;
 80035de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d109      	bne.n	800360c <HAL_RCC_OscConfig+0x93c>
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <HAL_RCC_OscConfig+0x930>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x958>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	10908120 	.word	0x10908120
 8003608:	40007000 	.word	0x40007000
 800360c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003610:	2202      	movs	r2, #2
 8003612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	4bbb      	ldr	r3, [pc, #748]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800362c:	2102      	movs	r1, #2
 800362e:	6011      	str	r1, [r2, #0]
 8003630:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	fa92 f1a2 	rbit	r1, r2
 800363a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800363e:	6011      	str	r1, [r2, #0]
  return result;
 8003640:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d099      	beq.n	8003596 <HAL_RCC_OscConfig+0x8c6>
 8003662:	e063      	b.n	800372c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7fe fa10 	bl	8001a88 <HAL_GetTick>
 8003668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fa0b 	bl	8001a88 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e225      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 8003686:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800368a:	2202      	movs	r2, #2
 800368c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036a2:	2202      	movs	r2, #2
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036b4:	601a      	str	r2, [r3, #0]
  return result;
 80036b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0xa06>
 80036d0:	4b90      	ldr	r3, [pc, #576]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	e00d      	b.n	80036f2 <HAL_RCC_OscConfig+0xa22>
 80036d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	fa93 f2a3 	rbit	r2, r3
 80036e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036f6:	2102      	movs	r1, #2
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003708:	6011      	str	r1, [r2, #0]
  return result;
 800370a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1a0      	bne.n	800366e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800372c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b77      	ldr	r3, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a76      	ldr	r2, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 81c2 	beq.w	8003ad0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	4b71      	ldr	r3, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	f000 819c 	beq.w	8003a92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	2b02      	cmp	r3, #2
 8003762:	f040 8114 	bne.w	800398e <HAL_RCC_OscConfig+0xcbe>
 8003766:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800376a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800377e:	601a      	str	r2, [r3, #0]
  return result;
 8003780:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003784:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003790:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f974 	bl	8001a88 <HAL_GetTick>
 80037a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	e009      	b.n	80037ba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe f96f 	bl	8001a88 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e18b      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 80037ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	fa93 f2a3 	rbit	r2, r3
 80037ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037d2:	601a      	str	r2, [r3, #0]
  return result;
 80037d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d102      	bne.n	80037f4 <HAL_RCC_OscConfig+0xb24>
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	e01b      	b.n	800382c <HAL_RCC_OscConfig+0xb5c>
 80037f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003830:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003834:	6011      	str	r1, [r2, #0]
 8003836:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	fa92 f1a2 	rbit	r1, r2
 8003840:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003844:	6011      	str	r1, [r2, #0]
  return result;
 8003846:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d19e      	bne.n	80037a6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	430b      	orrs	r3, r1
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800389c:	601a      	str	r2, [r3, #0]
  return result;
 800389e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2301      	movs	r3, #1
 80038b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe f8e5 	bl	8001a88 <HAL_GetTick>
 80038be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c2:	e009      	b.n	80038d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe f8e0 	bl	8001a88 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0fc      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 80038d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038f0:	601a      	str	r2, [r3, #0]
  return result;
 80038f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0xc48>
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e01e      	b.n	8003950 <HAL_RCC_OscConfig+0xc80>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_OscConfig+0xe0c>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003954:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	fa92 f1a2 	rbit	r1, r2
 8003964:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003968:	6011      	str	r1, [r2, #0]
  return result;
 800396a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d09b      	beq.n	80038c4 <HAL_RCC_OscConfig+0xbf4>
 800398c:	e0a0      	b.n	8003ad0 <HAL_RCC_OscConfig+0xe00>
 800398e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a6:	601a      	str	r2, [r3, #0]
  return result;
 80039a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe f860 	bl	8001a88 <HAL_GetTick>
 80039c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	e009      	b.n	80039e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fe f85b 	bl	8001a88 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e077      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
 80039e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	fa93 f2a3 	rbit	r2, r3
 80039f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fa:	601a      	str	r2, [r3, #0]
  return result;
 80039fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_OscConfig+0xd4c>
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_OscConfig+0xe0c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0xd84>
 8003a1c:	f107 0320 	add.w	r3, r7, #32
 8003a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f107 0320 	add.w	r3, r7, #32
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f107 031c 	add.w	r3, r7, #28
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f107 0318 	add.w	r3, r7, #24
 8003a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f107 0318 	add.w	r3, r7, #24
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	fa93 f2a3 	rbit	r2, r3
 8003a4a:	f107 0314 	add.w	r3, r7, #20
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_OscConfig+0xe0c>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f107 0210 	add.w	r2, r7, #16
 8003a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	f107 0210 	add.w	r2, r7, #16
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	fa92 f1a2 	rbit	r1, r2
 8003a68:	f107 020c 	add.w	r2, r7, #12
 8003a6c:	6011      	str	r1, [r2, #0]
  return result;
 8003a6e:	f107 020c 	add.w	r2, r7, #12
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f002 021f 	and.w	r2, r2, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d19e      	bne.n	80039ce <HAL_RCC_OscConfig+0xcfe>
 8003a90:	e01e      	b.n	8003ad0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e018      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_RCC_OscConfig+0xe0c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aa8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d108      	bne.n	8003acc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b09e      	sub	sp, #120	; 0x78
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e162      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af8:	4b90      	ldr	r3, [pc, #576]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d910      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	498b      	ldr	r1, [pc, #556]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e14a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	497f      	ldr	r1, [pc, #508]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80dc 	beq.w	8003d0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d13c      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xf6>
 8003b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xa6>
 8003b80:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	e00f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0xc6>
 8003b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	667b      	str	r3, [r7, #100]	; 0x64
 8003b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b98:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003baa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bb6:	fab2 f282 	clz	r2, r2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f042 0220 	orr.w	r2, r2, #32
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f002 021f 	and.w	r2, r2, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d17b      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0f3      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d13c      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x178>
 8003bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x128>
 8003c02:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	e00f      	b.n	8003c28 <HAL_RCC_ClockConfig+0x148>
 8003c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f042 0220 	orr.w	r2, r2, #32
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f002 021f 	and.w	r2, r2, #31
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13a      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b2      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x1a0>
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e00d      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1bc>
 8003c80:	2302      	movs	r3, #2
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	61ba      	str	r2, [r7, #24]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	fa92 f2a2 	rbit	r2, r2
 8003ca6:	617a      	str	r2, [r7, #20]
  return result;
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	fab2 f282 	clz	r2, r2
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f042 0220 	orr.w	r2, r2, #32
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f002 021f 	and.w	r2, r2, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e079      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	491a      	ldr	r1, [pc, #104]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd fed4 	bl	8001a88 <HAL_GetTick>
 8003ce0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd fed0 	bl	8001a88 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e061      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d214      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4906      	ldr	r1, [pc, #24]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e040      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	491a      	ldr	r1, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4912      	ldr	r1, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d82:	f000 f829 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d90:	22f0      	movs	r2, #240	; 0xf0
 8003d92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	fa92 f2a2 	rbit	r2, r2
 8003d9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	fab2 f282 	clz	r2, r2
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	40d3      	lsrs	r3, r2
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x2ec>)
 8003da8:	5cd3      	ldrb	r3, [r2, r3]
 8003daa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_ClockConfig+0x2f0>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCC_ClockConfig+0x2f4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fe22 	bl	8001a00 <HAL_InitTick>
  
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3778      	adds	r7, #120	; 0x78
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08004dc8 	.word	0x08004dc8
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b08b      	sub	sp, #44	; 0x2c
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x30>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x36>
 8003e06:	e03c      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e0a:	623b      	str	r3, [r7, #32]
      break;
 8003e0c:	e03c      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	fa92 f2a2 	rbit	r2, r2
 8003e20:	607a      	str	r2, [r7, #4]
  return result;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	40d3      	lsrs	r3, r2
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	60fa      	str	r2, [r7, #12]
  return result;
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	e004      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	623b      	str	r3, [r7, #32]
      break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e84:	623b      	str	r3, [r7, #32]
      break;
 8003e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	372c      	adds	r7, #44	; 0x2c
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	007a1200 	.word	0x007a1200
 8003ea0:	08004de0 	.word	0x08004de0
 8003ea4:	08004df0 	.word	0x08004df0
 8003ea8:	003d0900 	.word	0x003d0900

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003eca:	f7ff ffef 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003edc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	fa92 f2a2 	rbit	r2, r2
 8003ee4:	603a      	str	r2, [r7, #0]
  return result;
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	40d3      	lsrs	r3, r2
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08004dd8 	.word	0x08004dd8

08003f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f0e:	f7ff ffcd 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003f12:	4601      	mov	r1, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	fa92 f2a2 	rbit	r2, r2
 8003f28:	603a      	str	r2, [r7, #0]
  return result;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	40d3      	lsrs	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	08004dd8 	.word	0x08004dd8

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80d4 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f70:	4b4e      	ldr	r3, [pc, #312]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10e      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	61d3      	str	r3, [r2, #28]
 8003f88:	4b48      	ldr	r3, [pc, #288]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d118      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa6:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a41      	ldr	r2, [pc, #260]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fd69 	bl	8001a88 <HAL_GetTick>
 8003fb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fd fd65 	bl	8001a88 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b64      	cmp	r3, #100	; 0x64
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e14b      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd8:	4b34      	ldr	r3, [pc, #208]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8084 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d07c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	2301      	movs	r3, #1
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	461a      	mov	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800404a:	4a18      	ldr	r2, [pc, #96]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fd fd15 	bl	8001a88 <HAL_GetTick>
 800405e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd fd11 	bl	8001a88 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0f5      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004078:	2302      	movs	r3, #2
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	2302      	movs	r3, #2
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	61fb      	str	r3, [r7, #28]
  return result;
 8004090:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d108      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040a6:	4b01      	ldr	r3, [pc, #4]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	e00d      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40007000 	.word	0x40007000
 80040b4:	10908100 	.word	0x10908100
 80040b8:	2302      	movs	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	4b69      	ldr	r3, [pc, #420]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	2202      	movs	r2, #2
 80040ca:	613a      	str	r2, [r7, #16]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	fa92 f2a2 	rbit	r2, r2
 80040d2:	60fa      	str	r2, [r7, #12]
  return result;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	fab2 f282 	clz	r2, r2
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f002 021f 	and.w	r2, r2, #31
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0b7      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040f2:	4b5e      	ldr	r3, [pc, #376]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	495b      	ldr	r1, [pc, #364]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004100:	4313      	orrs	r3, r2
 8004102:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004104:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b57      	ldr	r3, [pc, #348]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4a56      	ldr	r2, [pc, #344]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004116:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494e      	ldr	r1, [pc, #312]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004132:	4313      	orrs	r3, r2
 8004134:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4947      	ldr	r1, [pc, #284]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004150:	4313      	orrs	r3, r2
 8004152:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004160:	4b42      	ldr	r3, [pc, #264]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	493f      	ldr	r1, [pc, #252]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f023 0220 	bic.w	r2, r3, #32
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4938      	ldr	r1, [pc, #224]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418c:	4313      	orrs	r3, r2
 800418e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800419c:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4930      	ldr	r1, [pc, #192]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4929      	ldr	r1, [pc, #164]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4921      	ldr	r1, [pc, #132]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	491a      	ldr	r1, [pc, #104]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004204:	4313      	orrs	r3, r2
 8004206:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	4912      	ldr	r1, [pc, #72]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004222:	4313      	orrs	r3, r2
 8004224:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	490b      	ldr	r1, [pc, #44]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004240:	4313      	orrs	r3, r2
 8004242:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800425e:	4313      	orrs	r3, r2
 8004260:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3748      	adds	r7, #72	; 0x48
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e040      	b.n	8004304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd f972 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa4c 	bl	800474c <UART_SetConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e022      	b.n	8004304 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb76 	bl	80049b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fbfd 	bl	8004afc <UART_CheckIdleState>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d113      	bne.n	8004364 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 81cc 	beq.w	80046f2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
      }
      return;
 8004362:	e1c6      	b.n	80046f2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80e3 	beq.w	8004532 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4ba5      	ldr	r3, [pc, #660]	; (8004610 <HAL_UART_IRQHandler+0x304>)
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80d8 	beq.w	8004532 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_UART_IRQHandler+0xa2>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <HAL_UART_IRQHandler+0xce>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2202      	movs	r2, #2
 80043c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_UART_IRQHandler+0xfa>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2204      	movs	r2, #4
 80043f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fc:	f043 0202 	orr.w	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d015      	beq.n	800443c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	f043 0208 	orr.w	r2, r3, #8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	2b00      	cmp	r3, #0
 8004444:	d011      	beq.n	800446a <HAL_UART_IRQHandler+0x15e>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8140 	beq.w	80046f6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d004      	beq.n	80044ba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d031      	beq.n	800451e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fbe3 	bl	8004c86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d123      	bne.n	8004516 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d013      	beq.n	800450e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_UART_IRQHandler+0x308>)
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fa23 	bl	800293e <HAL_DMA_Abort_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d017      	beq.n	800452e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004508:	4610      	mov	r0, r2
 800450a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450c:	e00f      	b.n	800452e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f906 	bl	8004720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	e00b      	b.n	800452e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f902 	bl	8004720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451c:	e007      	b.n	800452e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8fe 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800452c:	e0e3      	b.n	80046f6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452e:	bf00      	nop
    return;
 8004530:	e0e1      	b.n	80046f6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 80a7 	bne.w	800468a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a1 	beq.w	800468a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 809b 	beq.w	800468a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2210      	movs	r2, #16
 800455a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d156      	bne.n	8004618 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004574:	893b      	ldrh	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80bf 	beq.w	80046fa <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004582:	893a      	ldrh	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	f080 80b8 	bcs.w	80046fa <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	893a      	ldrh	r2, [r7, #8]
 800458e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b20      	cmp	r3, #32
 800459a:	d02a      	beq.n	80045f2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0210 	bic.w	r2, r2, #16
 80045e6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe f96d 	bl	80028cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	b29b      	uxth	r3, r3
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f894 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800460c:	e075      	b.n	80046fa <HAL_UART_IRQHandler+0x3ee>
 800460e:	bf00      	nop
 8004610:	04000120 	.word	0x04000120
 8004614:	08004ce5 	.word	0x08004ce5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004624:	b29b      	uxth	r3, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d063      	beq.n	80046fe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d060      	beq.n	80046fe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800464a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0210 	bic.w	r2, r2, #16
 800467c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f856 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004688:	e039      	b.n	80046fe <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_UART_IRQHandler+0x3a4>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fb4a 	bl	8004d42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ae:	e029      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01a      	beq.n	8004702 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
    }
    return;
 80046d4:	e015      	b.n	8004702 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d011      	beq.n	8004704 <HAL_UART_IRQHandler+0x3f8>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fb10 	bl	8004d10 <UART_EndTransmit_IT>
    return;
 80046f0:	e008      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
      return;
 80046f2:	bf00      	nop
 80046f4:	e006      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
    return;
 80046f6:	bf00      	nop
 80046f8:	e004      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
      return;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
      return;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004702:	bf00      	nop
  }

}
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop

0800470c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b8a      	ldr	r3, [pc, #552]	; (80049a0 <UART_SetConfig+0x254>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	6979      	ldr	r1, [r7, #20]
 8004780:	430b      	orrs	r3, r1
 8004782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a78      	ldr	r2, [pc, #480]	; (80049a4 <UART_SetConfig+0x258>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d120      	bne.n	800480a <UART_SetConfig+0xbe>
 80047c8:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <UART_SetConfig+0x25c>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d817      	bhi.n	8004804 <UART_SetConfig+0xb8>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x90>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047f9 	.word	0x080047f9
 80047e4:	080047ff 	.word	0x080047ff
 80047e8:	080047f3 	.word	0x080047f3
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e01d      	b.n	800482e <UART_SetConfig+0xe2>
 80047f2:	2302      	movs	r3, #2
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e01a      	b.n	800482e <UART_SetConfig+0xe2>
 80047f8:	2304      	movs	r3, #4
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e017      	b.n	800482e <UART_SetConfig+0xe2>
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e014      	b.n	800482e <UART_SetConfig+0xe2>
 8004804:	2310      	movs	r3, #16
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e011      	b.n	800482e <UART_SetConfig+0xe2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a67      	ldr	r2, [pc, #412]	; (80049ac <UART_SetConfig+0x260>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d102      	bne.n	800481a <UART_SetConfig+0xce>
 8004814:	2300      	movs	r3, #0
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e009      	b.n	800482e <UART_SetConfig+0xe2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a64      	ldr	r2, [pc, #400]	; (80049b0 <UART_SetConfig+0x264>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d102      	bne.n	800482a <UART_SetConfig+0xde>
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e001      	b.n	800482e <UART_SetConfig+0xe2>
 800482a:	2310      	movs	r3, #16
 800482c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004836:	d15b      	bne.n	80048f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004838:	7ffb      	ldrb	r3, [r7, #31]
 800483a:	2b08      	cmp	r3, #8
 800483c:	d827      	bhi.n	800488e <UART_SetConfig+0x142>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0xf8>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004869 	.word	0x08004869
 8004848:	08004871 	.word	0x08004871
 800484c:	08004879 	.word	0x08004879
 8004850:	0800488f 	.word	0x0800488f
 8004854:	0800487f 	.word	0x0800487f
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800488f 	.word	0x0800488f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7ff fb2c 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 800486c:	61b8      	str	r0, [r7, #24]
        break;
 800486e:	e013      	b.n	8004898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7ff fb4a 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8004874:	61b8      	str	r0, [r7, #24]
        break;
 8004876:	e00f      	b.n	8004898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b4e      	ldr	r3, [pc, #312]	; (80049b4 <UART_SetConfig+0x268>)
 800487a:	61bb      	str	r3, [r7, #24]
        break;
 800487c:	e00c      	b.n	8004898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7ff faab 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8004882:	61b8      	str	r0, [r7, #24]
        break;
 8004884:	e008      	b.n	8004898 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e004      	b.n	8004898 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	77bb      	strb	r3, [r7, #30]
        break;
 8004896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d074      	beq.n	8004988 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	005a      	lsls	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d916      	bls.n	80048ea <UART_SetConfig+0x19e>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d212      	bcs.n	80048ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f023 030f 	bic.w	r3, r3, #15
 80048cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	b29a      	uxth	r2, r3
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	4313      	orrs	r3, r2
 80048de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	89fa      	ldrh	r2, [r7, #14]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e04e      	b.n	8004988 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77bb      	strb	r3, [r7, #30]
 80048ee:	e04b      	b.n	8004988 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d827      	bhi.n	8004946 <UART_SetConfig+0x1fa>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x1b0>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004929 	.word	0x08004929
 8004904:	08004931 	.word	0x08004931
 8004908:	08004947 	.word	0x08004947
 800490c:	08004937 	.word	0x08004937
 8004910:	08004947 	.word	0x08004947
 8004914:	08004947 	.word	0x08004947
 8004918:	08004947 	.word	0x08004947
 800491c:	0800493f 	.word	0x0800493f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7ff fad0 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8004924:	61b8      	str	r0, [r7, #24]
        break;
 8004926:	e013      	b.n	8004950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7ff faee 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 800492c:	61b8      	str	r0, [r7, #24]
        break;
 800492e:	e00f      	b.n	8004950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <UART_SetConfig+0x268>)
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e00c      	b.n	8004950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004936:	f7ff fa4f 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 800493a:	61b8      	str	r0, [r7, #24]
        break;
 800493c:	e008      	b.n	8004950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e004      	b.n	8004950 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	77bb      	strb	r3, [r7, #30]
        break;
 800494e:	bf00      	nop
    }

    if (pclk != 0U)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	085a      	lsrs	r2, r3, #1
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	441a      	add	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	b29b      	uxth	r3, r3
 800496a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d908      	bls.n	8004984 <UART_SetConfig+0x238>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d204      	bcs.n	8004984 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e001      	b.n	8004988 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004994:	7fbb      	ldrb	r3, [r7, #30]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	efff69f3 	.word	0xefff69f3
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40004400 	.word	0x40004400
 80049b0:	40004800 	.word	0x40004800
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01a      	beq.n	8004ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab6:	d10a      	bne.n	8004ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b0c:	f7fc ffbc 	bl	8001a88 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d10e      	bne.n	8004b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f82d 	bl	8004b8e <UART_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e023      	b.n	8004b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d10e      	bne.n	8004b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f817 	bl	8004b8e <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e00d      	b.n	8004b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9e:	e05e      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d05a      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba8:	f7fc ff6e 	bl	8001a88 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11b      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e043      	b.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02c      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c12:	d124      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c2c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e00f      	b.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d091      	beq.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c9c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0210 	bic.w	r2, r2, #16
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fd0c 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d26:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fce9 	bl	800470c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 f820 	bl	8004db0 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08004e00 	.word	0x08004e00
 8004d94:	08004e00 	.word	0x08004e00
 8004d98:	08004e00 	.word	0x08004e00
 8004d9c:	08004e04 	.word	0x08004e04

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
